{
  "address": "0x392f8c6A8561ccc3ED33B37393e40F0B98f84286",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyTime",
          "type": "uint256"
        }
      ],
      "name": "ApplyUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCKTIME",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "applyLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "getApply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakesOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0049b0cb695a3f6be4140dc61f3627bde658ea8caec3d7033df8d54a996ff8fa",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x392f8c6A8561ccc3ED33B37393e40F0B98f84286",
    "transactionIndex": 1,
    "gasUsed": "2024089",
    "logsBloom": "0x
    "blockHash": "0x1b8b00c9c2ced07253ecae20e8199c6dab951279c717f8027ca31f5ccd497495",
    "transactionHash": "0x0049b0cb695a3f6be4140dc61f3627bde658ea8caec3d7033df8d54a996ff8fa",
    "logs": [],
    "blockNumber": 3719819,
    "cumulativeGasUsed": "2067904",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF4C3a4d9568672FB4A8174EfD29dDAB6255E8729"
  ],
  "numDeployments": 2,
  "solcInputHash": "85fe67a83e625234a2fa36ee6301bbae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"name\":\"ApplyUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKTIME\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"applyLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"getApply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/OPAIStake.sol\":\"OPAIStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/core/OPAIStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./Stake.sol\\\";\\n\\ncontract OPAIStake is Stake {\\n\\tconstructor(IERC20 token) Stake(token) {}\\n}\",\"keccak256\":\"0xa873d605bd8ba06fdcb6a5b7fa335ec29ce08a296f7e3a25c8542d14fa49d8da\",\"license\":\"MIT\"},\"contracts/core/Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"../dependencies/EnumerableApply.sol\\\";\\n\\ncontract Stake {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\tusing EnumerableApply for EnumerableApply.UintToApply;\\n\\n\\tuint64 public immutable LOCKTIME = 7 days;\\n\\tIERC20 public immutable TOKEN;\\n\\n\\tEnumerableMap.AddressToUintMap internal stakes;\\n\\n\\tmapping(address => uint256) internal applyIds;\\n\\n\\tmapping(address => EnumerableApply.UintToApply) internal applies;\\n\\n\\tevent Staked(address account, uint256 amount);\\n\\n\\tevent ApplyUnstaked(address account, uint256 applyId, uint256 amount, uint256 applyTime);\\n\\n\\tevent Unstaked(address account, uint256 applyId, uint256 amount);\\n\\n\\tconstructor(IERC20 _token) {\\n\\t\\tTOKEN = _token;\\n\\t}\\n\\n\\tfunction stake(uint256 amount) public virtual {\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tTOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\tstakes.set(msg.sender, oldAmount + amount);\\n\\t\\temit Staked(msg.sender, amount);\\n\\t}\\n\\n\\tfunction applyUnstake(uint256 amount) external {\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\trequire(amount <= oldAmount, \\\"amount must be less than stakes\\\");\\n\\t\\tuint256 id = applyIds[msg.sender];\\n\\t\\tuint256 newStake = oldAmount - amount;\\n\\t\\tif (newStake == 0) {\\n\\t\\t\\tstakes.remove(msg.sender);\\n\\t\\t} else {\\n\\t\\t\\tstakes.set(msg.sender, newStake);\\n\\t\\t}\\n\\t\\tapplies[msg.sender].set(id, EnumerableApply.ApplyInfo(amount, block.timestamp));\\n\\t\\tapplyIds[msg.sender]++;\\n\\t\\temit ApplyUnstaked(msg.sender, id, amount, block.timestamp);\\n\\t}\\n\\n\\tfunction unstake(address to, uint256 applyId) external {\\n\\t\\trequire(applies[msg.sender].contains(applyId), \\\"nonexistent apply\\\");\\n\\t\\tEnumerableApply.ApplyInfo memory info = getApply(msg.sender, applyId);\\n\\t\\trequire(info.applyTime + LOCKTIME <= block.timestamp, \\\"unstake locktime not expired\\\");\\n\\t\\tTOKEN.safeTransfer(to, info.amount);\\n\\t\\tapplies[msg.sender].remove(applyId);\\n\\t\\temit Unstaked(msg.sender, applyId, info.amount);\\n\\t}\\n\\n\\tfunction getStake(address account) public view returns (uint256) {\\n\\t\\tif (!stakes.contains(account)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn stakes.get(account);\\n\\t}\\n\\n\\tfunction stakesOf(uint256 start, uint256 amount) public view returns (address[] memory stakers, uint256[] memory amounts) {\\n\\t\\tuint256 size = stakeLength();\\n\\t\\tif (size != 0) {\\n\\t\\t\\tif (start < size) {\\n\\t\\t\\t\\tif (start + amount > size) {\\n\\t\\t\\t\\t\\tamount = size - start;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstakers = new address[](amount);\\n\\t\\t\\t\\tamounts = new uint256[](amount);\\n\\t\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t\\t(stakers[i], amounts[i]) = stakes.at(start + i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction stakeLength() public view returns (uint256) {\\n\\t\\treturn stakes.length();\\n\\t}\\n\\n\\tfunction applyLength(address account) public view returns (uint256) {\\n\\t\\treturn applies[account].length();\\n\\t}\\n\\n\\tfunction applyOf(address account, uint256 start, uint256 amount) public view returns (uint256[] memory ids, EnumerableApply.ApplyInfo[] memory infos) {\\n\\t\\tuint256 size = applyLength(account);\\n\\t\\tif (size != 0) {\\n\\t\\t\\tif (start < size) {\\n\\t\\t\\t\\tif (start + amount > size) {\\n\\t\\t\\t\\t\\tamount = size - start;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tids = new uint256[](amount);\\n\\t\\t\\t\\tinfos = new EnumerableApply.ApplyInfo[](amount);\\n\\t\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t\\t(ids[i], infos[i]) = applies[account].at(start + i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getApply(address account, uint256 applyId) public view returns (EnumerableApply.ApplyInfo memory info) {\\n\\t\\treturn applies[account].get(applyId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x1366df06d2ca5524c50e270f49104e154c76d3345afced4d1798a3cec07d64f7\",\"license\":\"MIT\"},\"contracts/dependencies/EnumerableApply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableApply {\\n\\tusing EnumerableSet for EnumerableSet.Bytes32Set;\\n\\terror EnumerableMapNonexistentKey(uint256 key);\\n\\n\\tstruct ApplyInfo {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 applyTime;\\n\\t}\\n\\n\\tstruct UintToApply {\\n\\t\\tEnumerableSet.Bytes32Set _keys;\\n\\t\\tmapping(uint256 => ApplyInfo) _values;\\n\\t}\\n\\n\\tfunction set(UintToApply storage map, uint256 key, ApplyInfo memory value) internal returns (bool) {\\n\\t\\tmap._values[key] = value;\\n\\t\\treturn map._keys.add(bytes32(key));\\n\\t}\\n\\n\\tfunction remove(UintToApply storage map, uint256 key) internal returns (bool) {\\n\\t\\tdelete map._values[key];\\n\\t\\treturn map._keys.remove(bytes32(key));\\n\\t}\\n\\n\\tfunction contains(UintToApply storage map, uint256 key) internal view returns (bool) {\\n\\t\\treturn map._keys.contains(bytes32(key));\\n\\t}\\n\\n\\tfunction length(UintToApply storage map) internal view returns (uint256) {\\n\\t\\treturn map._keys.length();\\n\\t}\\n\\n\\tfunction at(UintToApply storage map, uint256 index) internal view returns (uint256, ApplyInfo memory) {\\n\\t\\tbytes32 key = map._keys.at(index);\\n\\t\\treturn (uint256(key), map._values[uint256(key)]);\\n\\t}\\n\\n\\tfunction tryGet(UintToApply storage map, uint256 key) internal view returns (bool, ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0) {\\n\\t\\t\\treturn (contains(map, key), ApplyInfo({ amount: 0, applyTime: 0 }));\\n\\t\\t} else {\\n\\t\\t\\treturn (true, value);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction get(UintToApply storage map, uint256 key) internal view returns (ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0 && !contains(map, key)) {\\n\\t\\t\\trevert EnumerableMapNonexistentKey(key);\\n\\t\\t}\\n\\t\\treturn value;\\n\\t}\\n\\n\\tfunction keys(UintToApply storage map) internal view returns (bytes32[] memory) {\\n\\t\\treturn map._keys.values();\\n\\t}\\n}\\n\",\"keccak256\":\"0xba73d341d38bd752b9c5148a86c65f6b14f70cc6b757d11168f2ef50106aeff7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405262093a8067ffffffffffffffff1660809067ffffffffffffffff168152503480156200002f57600080fd5b506040516200253038038062002530833981810160405281019062000055919062000110565b808073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000c48262000097565b9050919050565b6000620000d882620000b7565b9050919050565b620000ea81620000cb565b8114620000f657600080fd5b50565b6000815190506200010a81620000df565b92915050565b60006020828403121562000129576200012862000092565b5b60006200013984828501620000f9565b91505092915050565b60805160a0516123b36200017d6000396000818161043c015281816104a9015261067f01526000818161025001526105fb01526123b36000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063c2a672e011610071578063c2a672e014610167578063c3b44ef414610183578063ce5ba450146101b3578063d4967282146101cf578063f155c6bf146101ed578063f9a64cc01461021d576100a9565b8063242c8e69146100ae57806371bdf9ea146100cc5780637a766460146100fd57806382bfefc81461012d578063a694fc3a1461014b575b600080fd5b6100b661024e565b6040516100c3919061166e565b60405180910390f35b6100e660048036038101906100e191906116c4565b610272565b6040516100f49291906118b2565b60405180910390f35b61011760048036038101906101129190611915565b6103fb565b6040516101249190611951565b60405180910390f35b61013561043a565b60405161014291906119cb565b60405180910390f35b610165600480360381019061016091906119e6565b61045e565b005b610181600480360381019061017c9190611a13565b61055a565b005b61019d60048036038101906101989190611a13565b610759565b6040516101aa9190611a82565b60405180910390f35b6101cd60048036038101906101c891906119e6565b6107ba565b005b6101d76109db565b6040516101e49190611951565b60405180910390f35b61020760048036038101906102029190611915565b6109ec565b6040516102149190611951565b60405180910390f35b61023760048036038101906102329190611a9d565b610a3c565b604051610245929190611bce565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b606080600061027f6109db565b9050600081146103f357808510156103f25780848661029e9190611c34565b11156102b35784816102b09190611c68565b93505b8367ffffffffffffffff8111156102cd576102cc611c9c565b5b6040519080825280602002602001820160405280156102fb5781602001602082028036833780820191505090505b5092508367ffffffffffffffff81111561031857610317611c9c565b5b6040519080825280602002602001820160405280156103465781602001602082028036833780820191505090505b50915060005b848110156103f05761037381876103639190611c34565b6000610be290919063ffffffff16565b85838151811061038657610385611ccb565b5b602002602001018584815181106103a05761039f611ccb565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806103e890611cfa565b91505061034c565b505b5b509250929050565b6000610411826000610c0e90919063ffffffff16565b61041e5760009050610435565b610432826000610c3e90919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081116104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049890611d9f565b60405180910390fd5b6104ee3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c71909392919063ffffffff16565b60006104f9336103fb565b905061051c33838361050b9190611c34565b6000610cfa9092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d338360405161054e929190611dce565b60405180910390a15050565b6105ab81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610d2f90919063ffffffff16565b6105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190611e43565b60405180910390fd5b60006105f63383610759565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516106339190611c34565b1115610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b90611eaf565b60405180910390fd5b6106c38382600001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d529092919063ffffffff16565b61071482600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610dd890919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e3383836000015160405161074c93929190611ecf565b60405180910390a1505050565b610761611631565b6107b282600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e2390919063ffffffff16565b905092915050565b600081116107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490611d9f565b60405180910390fd5b6000610808336103fb565b90508082111561084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490611f52565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000838361089f9190611c68565b9050600081036108c3576108bd336000610eca90919063ffffffff16565b506108db565b6108d933826000610cfa9092919063ffffffff16565b505b61094282604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610efa9092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061099390611cfa565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc21338386426040516109cd9493929190611f72565b60405180910390a150505050565b60006109e76000610f4b565b905090565b6000610a35600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f60565b9050919050565b6060806000610a4a866109ec565b905060008114610bd95780851015610bd857808486610a699190611c34565b1115610a7e578481610a7b9190611c68565b93505b8367ffffffffffffffff811115610a9857610a97611c9c565b5b604051908082528060200260200182016040528015610ac65781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610ae357610ae2611c9c565b5b604051908082528060200260200182016040528015610b1c57816020015b610b09611631565b815260200190600190039081610b015790505b50915060005b84811015610bd657610b868187610b399190611c34565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f7590919063ffffffff16565b858381518110610b9957610b98611ccb565b5b60200260200101858481518110610bb357610bb2611ccb565b5b602002602001018290528281525050508080610bce90611cfa565b915050610b22565b505b5b50935093915050565b600080600080610bf58660000186610fe3565b915091508160001c8160001c9350935050509250929050565b6000610c36836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611023565b905092915050565b6000610c66836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611043565b60001c905092915050565b610cf4846323b872dd60e01b858585604051602401610c9293929190611fb7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110bf565b50505050565b6000610d26846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611187565b90509392505050565b6000610d4a8260001b846000016111c290919063ffffffff16565b905092915050565b610dd38363a9059cbb60e01b8484604051602401610d71929190611dce565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110bf565b505050565b600082600201600083815260200190815260200160002060008082016000905560018201600090555050610e1b8260001b846000016111d990919063ffffffff16565b905092915050565b610e2b611631565b600083600201600084815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160200151148015610e7e5750610e7c8484610d2f565b155b15610ec057826040517f3a054bd4000000000000000000000000000000000000000000000000000000008152600401610eb79190611951565b60405180910390fd5b8091505092915050565b6000610ef2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6111f0565b905092915050565b6000818460020160008581526020019081526020016000206000820151816000015560208201518160010155905050610f428360001b8560000161122990919063ffffffff16565b90509392505050565b6000610f5982600001611240565b9050919050565b6000610f6e82600001611255565b9050919050565b6000610f7f611631565b6000610f97848660000161126a90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b6000806000610ffe848660000161126a90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b600061103b82846000016111c290919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b8114158061107657506110758484611023565b5b6110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac9061203a565b60405180910390fd5b8091505092915050565b6000611121826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112819092919063ffffffff16565b90506000815114806111435750808060200190518101906111429190612092565b5b611182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117990612131565b60405180910390fd5b505050565b600081846002016000858152602001908152602001600020819055506111b9838560000161122990919063ffffffff16565b90509392505050565b60006111d18360000183611299565b905092915050565b60006111e883600001836112bc565b905092915050565b60008260020160008381526020019081526020016000206000905561122182846000016111d990919063ffffffff16565b905092915050565b600061123883600001836113d0565b905092915050565b600061124e82600001611255565b9050919050565b600061126382600001611440565b9050919050565b60006112798360000183611451565b905092915050565b6060611290848460008561147c565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146113c45760006001826112ee9190611c68565b90506000600186600001805490506113069190611c68565b905081811461137557600086600001828154811061132757611326611ccb565b5b906000526020600020015490508087600001848154811061134b5761134a611ccb565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061138957611388612151565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506113ca565b60009150505b92915050565b60006113dc8383611299565b61143557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061143a565b600090505b92915050565b600081600001805490509050919050565b600082600001828154811061146957611468611ccb565b5b9060005260206000200154905092915050565b6060824710156114c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b8906121f2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114ea9190612283565b60006040518083038185875af1925050503d8060008114611527576040519150601f19603f3d011682016040523d82523d6000602084013e61152c565b606091505b509150915061153d87838387611549565b92505050949350505050565b606083156115ab5760008351036115a357611563856115be565b6115a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611599906122e6565b60405180910390fd5b5b8290506115b6565b6115b583836115e1565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156115f45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611628919061235b565b60405180910390fd5b604051806040016040528060008152602001600081525090565b600067ffffffffffffffff82169050919050565b6116688161164b565b82525050565b6000602082019050611683600083018461165f565b92915050565b600080fd5b6000819050919050565b6116a18161168e565b81146116ac57600080fd5b50565b6000813590506116be81611698565b92915050565b600080604083850312156116db576116da611689565b5b60006116e9858286016116af565b92505060206116fa858286016116af565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061175b82611730565b9050919050565b61176b81611750565b82525050565b600061177d8383611762565b60208301905092915050565b6000602082019050919050565b60006117a182611704565b6117ab818561170f565b93506117b683611720565b8060005b838110156117e75781516117ce8882611771565b97506117d983611789565b9250506001810190506117ba565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118298161168e565b82525050565b600061183b8383611820565b60208301905092915050565b6000602082019050919050565b600061185f826117f4565b61186981856117ff565b935061187483611810565b8060005b838110156118a557815161188c888261182f565b975061189783611847565b925050600181019050611878565b5085935050505092915050565b600060408201905081810360008301526118cc8185611796565b905081810360208301526118e08184611854565b90509392505050565b6118f281611750565b81146118fd57600080fd5b50565b60008135905061190f816118e9565b92915050565b60006020828403121561192b5761192a611689565b5b600061193984828501611900565b91505092915050565b61194b8161168e565b82525050565b60006020820190506119666000830184611942565b92915050565b6000819050919050565b600061199161198c61198784611730565b61196c565b611730565b9050919050565b60006119a382611976565b9050919050565b60006119b582611998565b9050919050565b6119c5816119aa565b82525050565b60006020820190506119e060008301846119bc565b92915050565b6000602082840312156119fc576119fb611689565b5b6000611a0a848285016116af565b91505092915050565b60008060408385031215611a2a57611a29611689565b5b6000611a3885828601611900565b9250506020611a49858286016116af565b9150509250929050565b604082016000820151611a696000850182611820565b506020820151611a7c6020850182611820565b50505050565b6000604082019050611a976000830184611a53565b92915050565b600080600060608486031215611ab657611ab5611689565b5b6000611ac486828701611900565b9350506020611ad5868287016116af565b9250506040611ae6868287016116af565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611b326000850182611820565b506020820151611b456020850182611820565b50505050565b6000611b578383611b1c565b60408301905092915050565b6000602082019050919050565b6000611b7b82611af0565b611b858185611afb565b9350611b9083611b0c565b8060005b83811015611bc1578151611ba88882611b4b565b9750611bb383611b63565b925050600181019050611b94565b5085935050505092915050565b60006040820190508181036000830152611be88185611854565b90508181036020830152611bfc8184611b70565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3f8261168e565b9150611c4a8361168e565b9250828201905080821115611c6257611c61611c05565b5b92915050565b6000611c738261168e565b9150611c7e8361168e565b9250828203905081811115611c9657611c95611c05565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611d058261168e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d3757611d36611c05565b5b600182019050919050565b600082825260208201905092915050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000611d89601d83611d42565b9150611d9482611d53565b602082019050919050565b60006020820190508181036000830152611db881611d7c565b9050919050565b611dc881611750565b82525050565b6000604082019050611de36000830185611dbf565b611df06020830184611942565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b6000611e2d601183611d42565b9150611e3882611df7565b602082019050919050565b60006020820190508181036000830152611e5c81611e20565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b6000611e99601c83611d42565b9150611ea482611e63565b602082019050919050565b60006020820190508181036000830152611ec881611e8c565b9050919050565b6000606082019050611ee46000830186611dbf565b611ef16020830185611942565b611efe6040830184611942565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e207374616b657300600082015250565b6000611f3c601f83611d42565b9150611f4782611f06565b602082019050919050565b60006020820190508181036000830152611f6b81611f2f565b9050919050565b6000608082019050611f876000830187611dbf565b611f946020830186611942565b611fa16040830185611942565b611fae6060830184611942565b95945050505050565b6000606082019050611fcc6000830186611dbf565b611fd96020830185611dbf565b611fe66040830184611942565b949350505050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b6000612024601e83611d42565b915061202f82611fee565b602082019050919050565b6000602082019050818103600083015261205381612017565b9050919050565b60008115159050919050565b61206f8161205a565b811461207a57600080fd5b50565b60008151905061208c81612066565b92915050565b6000602082840312156120a8576120a7611689565b5b60006120b68482850161207d565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061211b602a83611d42565b9150612126826120bf565b604082019050919050565b6000602082019050818103600083015261214a8161210e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006121dc602683611d42565b91506121e782612180565b604082019050919050565b6000602082019050818103600083015261220b816121cf565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561224657808201518184015260208101905061222b565b60008484015250505050565b600061225d82612212565b612267818561221d565b9350612277818560208601612228565b80840191505092915050565b600061228f8284612252565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006122d0601d83611d42565b91506122db8261229a565b602082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061232d82612306565b6123378185611d42565b9350612347818560208601612228565b61235081612311565b840191505092915050565b600060208201905081810360008301526123758184612322565b90509291505056fea2646970667358221220186d3081075d28b7f13f7ae177b1e546da1aaf2bc1e2be2ae7c1f88934f11c9964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063c2a672e011610071578063c2a672e014610167578063c3b44ef414610183578063ce5ba450146101b3578063d4967282146101cf578063f155c6bf146101ed578063f9a64cc01461021d576100a9565b8063242c8e69146100ae57806371bdf9ea146100cc5780637a766460146100fd57806382bfefc81461012d578063a694fc3a1461014b575b600080fd5b6100b661024e565b6040516100c3919061166e565b60405180910390f35b6100e660048036038101906100e191906116c4565b610272565b6040516100f49291906118b2565b60405180910390f35b61011760048036038101906101129190611915565b6103fb565b6040516101249190611951565b60405180910390f35b61013561043a565b60405161014291906119cb565b60405180910390f35b610165600480360381019061016091906119e6565b61045e565b005b610181600480360381019061017c9190611a13565b61055a565b005b61019d60048036038101906101989190611a13565b610759565b6040516101aa9190611a82565b60405180910390f35b6101cd60048036038101906101c891906119e6565b6107ba565b005b6101d76109db565b6040516101e49190611951565b60405180910390f35b61020760048036038101906102029190611915565b6109ec565b6040516102149190611951565b60405180910390f35b61023760048036038101906102329190611a9d565b610a3c565b604051610245929190611bce565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b606080600061027f6109db565b9050600081146103f357808510156103f25780848661029e9190611c34565b11156102b35784816102b09190611c68565b93505b8367ffffffffffffffff8111156102cd576102cc611c9c565b5b6040519080825280602002602001820160405280156102fb5781602001602082028036833780820191505090505b5092508367ffffffffffffffff81111561031857610317611c9c565b5b6040519080825280602002602001820160405280156103465781602001602082028036833780820191505090505b50915060005b848110156103f05761037381876103639190611c34565b6000610be290919063ffffffff16565b85838151811061038657610385611ccb565b5b602002602001018584815181106103a05761039f611ccb565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806103e890611cfa565b91505061034c565b505b5b509250929050565b6000610411826000610c0e90919063ffffffff16565b61041e5760009050610435565b610432826000610c3e90919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081116104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049890611d9f565b60405180910390fd5b6104ee3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c71909392919063ffffffff16565b60006104f9336103fb565b905061051c33838361050b9190611c34565b6000610cfa9092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d338360405161054e929190611dce565b60405180910390a15050565b6105ab81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610d2f90919063ffffffff16565b6105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190611e43565b60405180910390fd5b60006105f63383610759565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516106339190611c34565b1115610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b90611eaf565b60405180910390fd5b6106c38382600001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d529092919063ffffffff16565b61071482600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610dd890919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e3383836000015160405161074c93929190611ecf565b60405180910390a1505050565b610761611631565b6107b282600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e2390919063ffffffff16565b905092915050565b600081116107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490611d9f565b60405180910390fd5b6000610808336103fb565b90508082111561084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490611f52565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000838361089f9190611c68565b9050600081036108c3576108bd336000610eca90919063ffffffff16565b506108db565b6108d933826000610cfa9092919063ffffffff16565b505b61094282604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610efa9092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061099390611cfa565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc21338386426040516109cd9493929190611f72565b60405180910390a150505050565b60006109e76000610f4b565b905090565b6000610a35600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f60565b9050919050565b6060806000610a4a866109ec565b905060008114610bd95780851015610bd857808486610a699190611c34565b1115610a7e578481610a7b9190611c68565b93505b8367ffffffffffffffff811115610a9857610a97611c9c565b5b604051908082528060200260200182016040528015610ac65781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610ae357610ae2611c9c565b5b604051908082528060200260200182016040528015610b1c57816020015b610b09611631565b815260200190600190039081610b015790505b50915060005b84811015610bd657610b868187610b399190611c34565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f7590919063ffffffff16565b858381518110610b9957610b98611ccb565b5b60200260200101858481518110610bb357610bb2611ccb565b5b602002602001018290528281525050508080610bce90611cfa565b915050610b22565b505b5b50935093915050565b600080600080610bf58660000186610fe3565b915091508160001c8160001c9350935050509250929050565b6000610c36836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611023565b905092915050565b6000610c66836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611043565b60001c905092915050565b610cf4846323b872dd60e01b858585604051602401610c9293929190611fb7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110bf565b50505050565b6000610d26846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611187565b90509392505050565b6000610d4a8260001b846000016111c290919063ffffffff16565b905092915050565b610dd38363a9059cbb60e01b8484604051602401610d71929190611dce565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110bf565b505050565b600082600201600083815260200190815260200160002060008082016000905560018201600090555050610e1b8260001b846000016111d990919063ffffffff16565b905092915050565b610e2b611631565b600083600201600084815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160200151148015610e7e5750610e7c8484610d2f565b155b15610ec057826040517f3a054bd4000000000000000000000000000000000000000000000000000000008152600401610eb79190611951565b60405180910390fd5b8091505092915050565b6000610ef2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6111f0565b905092915050565b6000818460020160008581526020019081526020016000206000820151816000015560208201518160010155905050610f428360001b8560000161122990919063ffffffff16565b90509392505050565b6000610f5982600001611240565b9050919050565b6000610f6e82600001611255565b9050919050565b6000610f7f611631565b6000610f97848660000161126a90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b6000806000610ffe848660000161126a90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b600061103b82846000016111c290919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b8114158061107657506110758484611023565b5b6110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac9061203a565b60405180910390fd5b8091505092915050565b6000611121826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112819092919063ffffffff16565b90506000815114806111435750808060200190518101906111429190612092565b5b611182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117990612131565b60405180910390fd5b505050565b600081846002016000858152602001908152602001600020819055506111b9838560000161122990919063ffffffff16565b90509392505050565b60006111d18360000183611299565b905092915050565b60006111e883600001836112bc565b905092915050565b60008260020160008381526020019081526020016000206000905561122182846000016111d990919063ffffffff16565b905092915050565b600061123883600001836113d0565b905092915050565b600061124e82600001611255565b9050919050565b600061126382600001611440565b9050919050565b60006112798360000183611451565b905092915050565b6060611290848460008561147c565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146113c45760006001826112ee9190611c68565b90506000600186600001805490506113069190611c68565b905081811461137557600086600001828154811061132757611326611ccb565b5b906000526020600020015490508087600001848154811061134b5761134a611ccb565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061138957611388612151565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506113ca565b60009150505b92915050565b60006113dc8383611299565b61143557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061143a565b600090505b92915050565b600081600001805490509050919050565b600082600001828154811061146957611468611ccb565b5b9060005260206000200154905092915050565b6060824710156114c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b8906121f2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114ea9190612283565b60006040518083038185875af1925050503d8060008114611527576040519150601f19603f3d011682016040523d82523d6000602084013e61152c565b606091505b509150915061153d87838387611549565b92505050949350505050565b606083156115ab5760008351036115a357611563856115be565b6115a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611599906122e6565b60405180910390fd5b5b8290506115b6565b6115b583836115e1565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156115f45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611628919061235b565b60405180910390fd5b604051806040016040528060008152602001600081525090565b600067ffffffffffffffff82169050919050565b6116688161164b565b82525050565b6000602082019050611683600083018461165f565b92915050565b600080fd5b6000819050919050565b6116a18161168e565b81146116ac57600080fd5b50565b6000813590506116be81611698565b92915050565b600080604083850312156116db576116da611689565b5b60006116e9858286016116af565b92505060206116fa858286016116af565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061175b82611730565b9050919050565b61176b81611750565b82525050565b600061177d8383611762565b60208301905092915050565b6000602082019050919050565b60006117a182611704565b6117ab818561170f565b93506117b683611720565b8060005b838110156117e75781516117ce8882611771565b97506117d983611789565b9250506001810190506117ba565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118298161168e565b82525050565b600061183b8383611820565b60208301905092915050565b6000602082019050919050565b600061185f826117f4565b61186981856117ff565b935061187483611810565b8060005b838110156118a557815161188c888261182f565b975061189783611847565b925050600181019050611878565b5085935050505092915050565b600060408201905081810360008301526118cc8185611796565b905081810360208301526118e08184611854565b90509392505050565b6118f281611750565b81146118fd57600080fd5b50565b60008135905061190f816118e9565b92915050565b60006020828403121561192b5761192a611689565b5b600061193984828501611900565b91505092915050565b61194b8161168e565b82525050565b60006020820190506119666000830184611942565b92915050565b6000819050919050565b600061199161198c61198784611730565b61196c565b611730565b9050919050565b60006119a382611976565b9050919050565b60006119b582611998565b9050919050565b6119c5816119aa565b82525050565b60006020820190506119e060008301846119bc565b92915050565b6000602082840312156119fc576119fb611689565b5b6000611a0a848285016116af565b91505092915050565b60008060408385031215611a2a57611a29611689565b5b6000611a3885828601611900565b9250506020611a49858286016116af565b9150509250929050565b604082016000820151611a696000850182611820565b506020820151611a7c6020850182611820565b50505050565b6000604082019050611a976000830184611a53565b92915050565b600080600060608486031215611ab657611ab5611689565b5b6000611ac486828701611900565b9350506020611ad5868287016116af565b9250506040611ae6868287016116af565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611b326000850182611820565b506020820151611b456020850182611820565b50505050565b6000611b578383611b1c565b60408301905092915050565b6000602082019050919050565b6000611b7b82611af0565b611b858185611afb565b9350611b9083611b0c565b8060005b83811015611bc1578151611ba88882611b4b565b9750611bb383611b63565b925050600181019050611b94565b5085935050505092915050565b60006040820190508181036000830152611be88185611854565b90508181036020830152611bfc8184611b70565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3f8261168e565b9150611c4a8361168e565b9250828201905080821115611c6257611c61611c05565b5b92915050565b6000611c738261168e565b9150611c7e8361168e565b9250828203905081811115611c9657611c95611c05565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611d058261168e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d3757611d36611c05565b5b600182019050919050565b600082825260208201905092915050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000611d89601d83611d42565b9150611d9482611d53565b602082019050919050565b60006020820190508181036000830152611db881611d7c565b9050919050565b611dc881611750565b82525050565b6000604082019050611de36000830185611dbf565b611df06020830184611942565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b6000611e2d601183611d42565b9150611e3882611df7565b602082019050919050565b60006020820190508181036000830152611e5c81611e20565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b6000611e99601c83611d42565b9150611ea482611e63565b602082019050919050565b60006020820190508181036000830152611ec881611e8c565b9050919050565b6000606082019050611ee46000830186611dbf565b611ef16020830185611942565b611efe6040830184611942565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e207374616b657300600082015250565b6000611f3c601f83611d42565b9150611f4782611f06565b602082019050919050565b60006020820190508181036000830152611f6b81611f2f565b9050919050565b6000608082019050611f876000830187611dbf565b611f946020830186611942565b611fa16040830185611942565b611fae6060830184611942565b95945050505050565b6000606082019050611fcc6000830186611dbf565b611fd96020830185611dbf565b611fe66040830184611942565b949350505050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b6000612024601e83611d42565b915061202f82611fee565b602082019050919050565b6000602082019050818103600083015261205381612017565b9050919050565b60008115159050919050565b61206f8161205a565b811461207a57600080fd5b50565b60008151905061208c81612066565b92915050565b6000602082840312156120a8576120a7611689565b5b60006120b68482850161207d565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061211b602a83611d42565b9150612126826120bf565b604082019050919050565b6000602082019050818103600083015261214a8161210e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006121dc602683611d42565b91506121e782612180565b604082019050919050565b6000602082019050818103600083015261220b816121cf565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561224657808201518184015260208101905061222b565b60008484015250505050565b600061225d82612212565b612267818561221d565b9350612277818560208601612228565b80840191505092915050565b600061228f8284612252565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006122d0601d83611d42565b91506122db8261229a565b602082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061232d82612306565b6123378185611d42565b9350612347818560208601612228565b61235081612311565b840191505092915050565b600060208201905081810360008301526123758184612322565b90509291505056fea2646970667358221220186d3081075d28b7f13f7ae177b1e546da1aaf2bc1e2be2ae7c1f88934f11c9964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7045,
        "contract": "contracts/core/OPAIStake.sol:OPAIStake",
        "label": "stakes",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressToUintMap)5676_storage"
      },
      {
        "astId": 7049,
        "contract": "contracts/core/OPAIStake.sol:OPAIStake",
        "label": "applyIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7054,
        "contract": "contracts/core/OPAIStake.sol:OPAIStake",
        "label": "applies",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UintToApply)8419_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintToApply)8419_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableApply.UintToApply)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToApply)8419_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApplyInfo)8410_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableApply.ApplyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplyInfo)8410_storage"
      },
      "t_struct(AddressToUintMap)5676_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 5675,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)4926_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ApplyInfo)8410_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.ApplyInfo",
        "members": [
          {
            "astId": 8407,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8409,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "applyTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)6373_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 6372,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6179_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)4926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 4921,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)6373_storage"
          },
          {
            "astId": 4925,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)6179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6174,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6178,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToApply)8419_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.UintToApply",
        "members": [
          {
            "astId": 8413,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)6373_storage"
          },
          {
            "astId": 8418,
            "contract": "contracts/core/OPAIStake.sol:OPAIStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(ApplyInfo)8410_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}