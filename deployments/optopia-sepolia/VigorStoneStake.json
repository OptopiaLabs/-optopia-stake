{
  "address": "0x963D0FEB162BD02f1c845E18A408C5C2D6e347Cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyTime",
          "type": "uint256"
        }
      ],
      "name": "ApplyUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCKTIME",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXSTAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "applyLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "getApply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakesOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93f100d4300f22a82fb1135ce17e4beb05eb17e18d6f24d8879358ce0faa830e",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x963D0FEB162BD02f1c845E18A408C5C2D6e347Cd",
    "transactionIndex": 1,
    "gasUsed": "2163043",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x60d3f1e0843af756bcdde0edf23c8b05201cc02b7d5f9fb02c773237e2341ffc",
    "transactionHash": "0x93f100d4300f22a82fb1135ce17e4beb05eb17e18d6f24d8879358ce0faa830e",
    "logs": [],
    "blockNumber": 1864961,
    "cumulativeGasUsed": "2206906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x20b7b213f257D0e2dfBb9CFAe4Dc47797eB18DfD"
  ],
  "numDeployments": 1,
  "solcInputHash": "2fb8f2ffd2e3fd56577c5bb57438a114",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"name\":\"ApplyUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKTIME\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXSTAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"applyLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"getApply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}]},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VigorStoneStake.sol\":\"VigorStoneStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/core/VigorStoneStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"../dependencies/EnumerableApply.sol\\\";\\n\\ncontract VigorStoneStake is ERC1155Holder {\\n\\tusing EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\tusing EnumerableApply for EnumerableApply.UintToApply;\\n\\n\\tuint256 public constant TOKENID = 0;\\n\\tuint64 public immutable LOCKTIME = 5 minutes;\\n\\tIERC1155 public immutable TOKEN;\\n\\tuint256 public immutable MAXSTAKE = 5;\\n\\n\\tEnumerableMap.AddressToUintMap internal stakes;\\n\\n\\tmapping(address => uint256) internal applyIds;\\n\\n\\tmapping(address => EnumerableApply.UintToApply) internal applies;\\n\\n\\tevent Staked(address account, uint256 amount);\\n\\n\\tevent ApplyUnstaked(address account, uint256 applyId, uint256 amount, uint256 applyTime);\\n\\n\\tevent Unstaked(address account, uint256 applyId, uint256 amount);\\n\\n\\tconstructor(IERC1155 _token) {\\n\\t\\tTOKEN = _token;\\n\\t}\\n\\n\\tfunction stake(uint256 amount) external {\\n\\t\\trequire(getStake(msg.sender) + amount <= MAXSTAKE, \\\"stake exceeds max stake\\\");\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tTOKEN.safeTransferFrom(msg.sender, address(this), TOKENID, amount, \\\"\\\");\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\tstakes.set(msg.sender, oldAmount + amount);\\n\\t\\temit Staked(msg.sender, amount);\\n\\t}\\n\\n\\tfunction applyUnstake(uint256 amount) external {\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\trequire(amount <= oldAmount, \\\"amount must be less than or equal to stakes\\\");\\n\\t\\tuint256 id = applyIds[msg.sender];\\n\\t\\tuint256 newStake = oldAmount - amount;\\n\\t\\tif (newStake == 0) {\\n\\t\\t\\tstakes.remove(msg.sender);\\n\\t\\t} else {\\n\\t\\t\\tstakes.set(msg.sender, newStake);\\n\\t\\t}\\n\\t\\tapplies[msg.sender].set(id, EnumerableApply.ApplyInfo(amount, block.timestamp));\\n\\t\\tapplyIds[msg.sender]++;\\n\\t\\temit ApplyUnstaked(msg.sender, id, amount, block.timestamp);\\n\\t}\\n\\n\\tfunction unstake(address to, uint256 applyId) external {\\n\\t\\trequire(applies[msg.sender].contains(applyId), \\\"nonexistent apply\\\");\\n\\t\\tEnumerableApply.ApplyInfo memory info = getApply(msg.sender, applyId);\\n\\t\\trequire(info.applyTime + LOCKTIME <= block.timestamp, \\\"unstake locktime not expired\\\");\\n\\t\\tTOKEN.safeTransferFrom(address(this), to, TOKENID, info.amount, \\\"\\\");\\n\\t\\tapplies[msg.sender].remove(applyId);\\n\\t\\temit Unstaked(msg.sender, applyId, info.amount);\\n\\t}\\n\\n\\tfunction getStake(address account) public view returns (uint256) {\\n\\t\\tif (!stakes.contains(account)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn stakes.get(account);\\n\\t}\\n\\n\\tfunction getApply(address account, uint256 applyId) public view returns (EnumerableApply.ApplyInfo memory info) {\\n\\t\\treturn applies[account].get(applyId);\\n\\t}\\n\\n\\tfunction stakesOf(uint256 start, uint256 amount) public view returns (address[] memory stakers, uint256[] memory amounts) {\\n\\t\\tuint256 size = stakeLength();\\n\\t\\tif (size != 0) {\\n\\t\\t\\trequire(start < size, \\\"invalid start\\\");\\n\\t\\t\\tif (start + amount > size) {\\n\\t\\t\\t\\tamount = size - start;\\n\\t\\t\\t}\\n\\t\\t\\tstakers = new address[](amount);\\n\\t\\t\\tamounts = new uint256[](amount);\\n\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t(stakers[i], amounts[i]) = stakes.at(start + i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction stakeLength() public view returns (uint256) {\\n\\t\\treturn stakes.length();\\n\\t}\\n\\n\\tfunction applyLength(address account) public view returns (uint256) {\\n\\t\\treturn applies[account].length();\\n\\t}\\n\\n\\tfunction applyOf(address account, uint256 start, uint256 amount) public view returns (uint256[] memory ids, EnumerableApply.ApplyInfo[] memory infos) {\\n\\t\\tuint256 size = applyLength(account);\\n\\t\\trequire(start < size, \\\"invalid start\\\");\\n\\t\\tif (start + amount > size) {\\n\\t\\t\\tamount = size - start;\\n\\t\\t}\\n\\t\\tids = new uint256[](amount);\\n\\t\\tinfos = new EnumerableApply.ApplyInfo[](amount);\\n\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t(ids[i], infos[i]) = applies[account].at(start + i);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc10d3dd94facf3d7dcf127f552de923d24bf8e7597e91af8f7e9d9a855a425ef\",\"license\":\"MIT\"},\"contracts/dependencies/EnumerableApply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableApply {\\n\\tusing EnumerableSet for EnumerableSet.Bytes32Set;\\n\\terror EnumerableMapNonexistentKey(uint256 key);\\n\\n\\tstruct ApplyInfo {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 applyTime;\\n\\t}\\n\\n\\tstruct UintToApply {\\n\\t\\tEnumerableSet.Bytes32Set _keys;\\n\\t\\tmapping(uint256 => ApplyInfo) _values;\\n\\t}\\n\\n\\tfunction set(UintToApply storage map, uint256 key, ApplyInfo memory value) internal returns (bool) {\\n\\t\\tmap._values[key] = value;\\n\\t\\treturn map._keys.add(bytes32(key));\\n\\t}\\n\\n\\tfunction remove(UintToApply storage map, uint256 key) internal returns (bool) {\\n\\t\\tdelete map._values[key];\\n\\t\\treturn map._keys.remove(bytes32(key));\\n\\t}\\n\\n\\tfunction contains(UintToApply storage map, uint256 key) internal view returns (bool) {\\n\\t\\treturn map._keys.contains(bytes32(key));\\n\\t}\\n\\n\\tfunction length(UintToApply storage map) internal view returns (uint256) {\\n\\t\\treturn map._keys.length();\\n\\t}\\n\\n\\tfunction at(UintToApply storage map, uint256 index) internal view returns (uint256, ApplyInfo memory) {\\n\\t\\tbytes32 key = map._keys.at(index);\\n\\t\\treturn (uint256(key), map._values[uint256(key)]);\\n\\t}\\n\\n\\tfunction tryGet(UintToApply storage map, uint256 key) internal view returns (bool, ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0) {\\n\\t\\t\\treturn (contains(map, key), ApplyInfo({ amount: 0, applyTime: 0 }));\\n\\t\\t} else {\\n\\t\\t\\treturn (true, value);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction get(UintToApply storage map, uint256 key) internal view returns (ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0 && !contains(map, key)) {\\n\\t\\t\\trevert EnumerableMapNonexistentKey(key);\\n\\t\\t}\\n\\t\\treturn value;\\n\\t}\\n\\n\\tfunction keys(UintToApply storage map) internal view returns (bytes32[] memory) {\\n\\t\\treturn map._keys.values();\\n\\t}\\n}\\n\",\"keccak256\":\"0xba73d341d38bd752b9c5148a86c65f6b14f70cc6b757d11168f2ef50106aeff7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405261012c67ffffffffffffffff1660809067ffffffffffffffff16815250600560c0908152503480156200003657600080fd5b50604051620027ce380380620027ce83398181016040528101906200005c919062000115565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000147565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000c9826200009c565b9050919050565b6000620000dd82620000bc565b9050919050565b620000ef81620000d0565b8114620000fb57600080fd5b50565b6000815190506200010f81620000e4565b92915050565b6000602082840312156200012e576200012d62000097565b5b60006200013e84828501620000fe565b91505092915050565b60805160a05160c05161263b62000193600039600081816103ed015261065a01526000818161063601528181610713015261094001526000818161041101526108c5015261263b6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063c2a672e011610097578063f155c6bf11610066578063f155c6bf146102c2578063f23a6e61146102f2578063f9a64cc014610322578063fea47c491461035357610100565b8063c2a672e01461023c578063c3b44ef414610258578063ce5ba45014610288578063d4967282146102a457610100565b80637a766460116100d35780637a766460146101a257806382bfefc8146101d2578063a694fc3a146101f0578063bc197c811461020c57610100565b806301ffc9a7146101055780631d3c613a14610135578063242c8e691461015357806371bdf9ea14610171575b600080fd5b61011f600480360381019061011a91906116dc565b610371565b60405161012c9190611724565b60405180910390f35b61013d6103eb565b60405161014a9190611758565b60405180910390f35b61015b61040f565b6040516101689190611796565b60405180910390f35b61018b600480360381019061018691906117dd565b610433565b6040516101999291906119cb565b60405180910390f35b6101bc60048036038101906101b79190611a2e565b6105f5565b6040516101c99190611758565b60405180910390f35b6101da610634565b6040516101e79190611aba565b60405180910390f35b61020a60048036038101906102059190611ad5565b610658565b005b61022660048036038101906102219190611d10565b61080f565b6040516102339190611dee565b60405180910390f35b61025660048036038101906102519190611e09565b610824565b005b610272600480360381019061026d9190611e09565b610a6a565b60405161027f9190611e78565b60405180910390f35b6102a2600480360381019061029d9190611ad5565b610acb565b005b6102ac610cec565b6040516102b99190611758565b60405180910390f35b6102dc60048036038101906102d79190611a2e565b610cfd565b6040516102e99190611758565b60405180910390f35b61030c60048036038101906103079190611e93565b610d4d565b6040516103199190611dee565b60405180910390f35b61033c60048036038101906103379190611f2a565b610d62565b60405161034a92919061205b565b60405180910390f35b61035b610f38565b6040516103689190611758565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e457506103e382610f3d565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806000610440610cec565b9050600081146105ed5780851061048c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610483906120ef565b60405180910390fd5b808486610499919061213e565b11156104ae5784816104ab9190612172565b93505b8367ffffffffffffffff8111156104c8576104c7611b18565b5b6040519080825280602002602001820160405280156104f65781602001602082028036833780820191505090505b5092508367ffffffffffffffff81111561051357610512611b18565b5b6040519080825280602002602001820160405280156105415781602001602082028036833780820191505090505b50915060005b848110156105eb5761056e818761055e919061213e565b6000610fa790919063ffffffff16565b858381518110610581576105806121a6565b5b6020026020010185848151811061059b5761059a6121a6565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806105e3906121d5565b915050610547565b505b509250929050565b600061060b826000610fd390919063ffffffff16565b610618576000905061062f565b61062c82600061100390919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081610683336105f5565b61068d919061213e565b11156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590612269565b60405180910390fd5b60008111610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906122d5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a33306000856040518563ffffffff1660e01b8152600401610771949392919061233b565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b5050505060006107ae336105f5565b90506107d13383836107c0919061213e565b60006110369092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3383604051610803929190612393565b60405180910390a15050565b600063bc197c8160e01b905095945050505050565b61087581600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061106b90919063ffffffff16565b6108b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ab90612408565b60405180910390fd5b60006108c03383610a6a565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516108fd919061213e565b111561093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093590612474565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600085600001516040518563ffffffff1660e01b81526004016109a2949392919061233b565b600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b50505050610a2582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061108e90919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e33838360000151604051610a5d93929190612494565b60405180910390a1505050565b610a72611656565b610ac382600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110d990919063ffffffff16565b905092915050565b60008111610b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b05906122d5565b60405180910390fd5b6000610b19336105f5565b905080821115610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b559061253d565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008383610bb09190612172565b905060008103610bd457610bce33600061118090919063ffffffff16565b50610bec565b610bea338260006110369092919063ffffffff16565b505b610c5382604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111b09092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ca4906121d5565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc2133838642604051610cde949392919061255d565b60405180910390a150505050565b6000610cf86000611201565b905090565b6000610d46600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611216565b9050919050565b600063f23a6e6160e01b905095945050505050565b6060806000610d7086610cfd565b9050808510610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab906120ef565b60405180910390fd5b808486610dc1919061213e565b1115610dd6578481610dd39190612172565b93505b8367ffffffffffffffff811115610df057610def611b18565b5b604051908082528060200260200182016040528015610e1e5781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610e3b57610e3a611b18565b5b604051908082528060200260200182016040528015610e7457816020015b610e61611656565b815260200190600190039081610e595790505b50915060005b84811015610f2e57610ede8187610e91919061213e565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061122b90919063ffffffff16565b858381518110610ef157610ef06121a6565b5b60200260200101858481518110610f0b57610f0a6121a6565b5b602002602001018290528281525050508080610f26906121d5565b915050610e7a565b5050935093915050565b600081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610fba8660000186611299565b915091508160001c8160001c9350935050509250929050565b6000610ffb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6112d9565b905092915050565b600061102b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6112f9565b60001c905092915050565b6000611062846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611379565b90509392505050565b60006110868260001b846000016113b490919063ffffffff16565b905092915050565b6000826002016000838152602001908152602001600020600080820160009055600182016000905550506110d18260001b846000016113cb90919063ffffffff16565b905092915050565b6110e1611656565b6000836002016000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600081602001511480156111345750611132848461106b565b155b1561117657826040517f3a054bd400000000000000000000000000000000000000000000000000000000815260040161116d9190611758565b60405180910390fd5b8091505092915050565b60006111a8836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6113e2565b905092915050565b60008184600201600085815260200190815260200160002060008201518160000155602082015181600101559050506111f88360001b8560000161141b90919063ffffffff16565b90509392505050565b600061120f82600001611432565b9050919050565b600061122482600001611447565b9050919050565b6000611235611656565b600061124d848660000161145c90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b60008060006112b4848660000161145c90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b60006112f182846000016113b490919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b8114801561132d575061132b84846112d9565b155b1561136f57826040517f02b5668600000000000000000000000000000000000000000000000000000000815260040161136691906125bb565b60405180910390fd5b8091505092915050565b600081846002016000858152602001908152602001600020819055506113ab838560000161141b90919063ffffffff16565b90509392505050565b60006113c38360000183611473565b905092915050565b60006113da8360000183611496565b905092915050565b60008260020160008381526020019081526020016000206000905561141382846000016113cb90919063ffffffff16565b905092915050565b600061142a83600001836115aa565b905092915050565b600061144082600001611447565b9050919050565b60006114558260000161161a565b9050919050565b600061146b836000018361162b565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461159e5760006001826114c89190612172565b90506000600186600001805490506114e09190612172565b905080821461154f576000866000018281548110611501576115006121a6565b5b9060005260206000200154905080876000018481548110611525576115246121a6565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611563576115626125d6565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506115a4565b60009150505b92915050565b60006115b68383611473565b61160f578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611614565b600090505b92915050565b600081600001805490509050919050565b6000826000018281548110611643576116426121a6565b5b9060005260206000200154905092915050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116b981611684565b81146116c457600080fd5b50565b6000813590506116d6816116b0565b92915050565b6000602082840312156116f2576116f161167a565b5b6000611700848285016116c7565b91505092915050565b60008115159050919050565b61171e81611709565b82525050565b60006020820190506117396000830184611715565b92915050565b6000819050919050565b6117528161173f565b82525050565b600060208201905061176d6000830184611749565b92915050565b600067ffffffffffffffff82169050919050565b61179081611773565b82525050565b60006020820190506117ab6000830184611787565b92915050565b6117ba8161173f565b81146117c557600080fd5b50565b6000813590506117d7816117b1565b92915050565b600080604083850312156117f4576117f361167a565b5b6000611802858286016117c8565b9250506020611813858286016117c8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061187482611849565b9050919050565b61188481611869565b82525050565b6000611896838361187b565b60208301905092915050565b6000602082019050919050565b60006118ba8261181d565b6118c48185611828565b93506118cf83611839565b8060005b838110156119005781516118e7888261188a565b97506118f2836118a2565b9250506001810190506118d3565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6119428161173f565b82525050565b60006119548383611939565b60208301905092915050565b6000602082019050919050565b60006119788261190d565b6119828185611918565b935061198d83611929565b8060005b838110156119be5781516119a58882611948565b97506119b083611960565b925050600181019050611991565b5085935050505092915050565b600060408201905081810360008301526119e581856118af565b905081810360208301526119f9818461196d565b90509392505050565b611a0b81611869565b8114611a1657600080fd5b50565b600081359050611a2881611a02565b92915050565b600060208284031215611a4457611a4361167a565b5b6000611a5284828501611a19565b91505092915050565b6000819050919050565b6000611a80611a7b611a7684611849565b611a5b565b611849565b9050919050565b6000611a9282611a65565b9050919050565b6000611aa482611a87565b9050919050565b611ab481611a99565b82525050565b6000602082019050611acf6000830184611aab565b92915050565b600060208284031215611aeb57611aea61167a565b5b6000611af9848285016117c8565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b5082611b07565b810181811067ffffffffffffffff82111715611b6f57611b6e611b18565b5b80604052505050565b6000611b82611670565b9050611b8e8282611b47565b919050565b600067ffffffffffffffff821115611bae57611bad611b18565b5b602082029050602081019050919050565b600080fd5b6000611bd7611bd284611b93565b611b78565b90508083825260208201905060208402830185811115611bfa57611bf9611bbf565b5b835b81811015611c235780611c0f88826117c8565b845260208401935050602081019050611bfc565b5050509392505050565b600082601f830112611c4257611c41611b02565b5b8135611c52848260208601611bc4565b91505092915050565b600080fd5b600067ffffffffffffffff821115611c7b57611c7a611b18565b5b611c8482611b07565b9050602081019050919050565b82818337600083830152505050565b6000611cb3611cae84611c60565b611b78565b905082815260208101848484011115611ccf57611cce611c5b565b5b611cda848285611c91565b509392505050565b600082601f830112611cf757611cf6611b02565b5b8135611d07848260208601611ca0565b91505092915050565b600080600080600060a08688031215611d2c57611d2b61167a565b5b6000611d3a88828901611a19565b9550506020611d4b88828901611a19565b945050604086013567ffffffffffffffff811115611d6c57611d6b61167f565b5b611d7888828901611c2d565b935050606086013567ffffffffffffffff811115611d9957611d9861167f565b5b611da588828901611c2d565b925050608086013567ffffffffffffffff811115611dc657611dc561167f565b5b611dd288828901611ce2565b9150509295509295909350565b611de881611684565b82525050565b6000602082019050611e036000830184611ddf565b92915050565b60008060408385031215611e2057611e1f61167a565b5b6000611e2e85828601611a19565b9250506020611e3f858286016117c8565b9150509250929050565b604082016000820151611e5f6000850182611939565b506020820151611e726020850182611939565b50505050565b6000604082019050611e8d6000830184611e49565b92915050565b600080600080600060a08688031215611eaf57611eae61167a565b5b6000611ebd88828901611a19565b9550506020611ece88828901611a19565b9450506040611edf888289016117c8565b9350506060611ef0888289016117c8565b925050608086013567ffffffffffffffff811115611f1157611f1061167f565b5b611f1d88828901611ce2565b9150509295509295909350565b600080600060608486031215611f4357611f4261167a565b5b6000611f5186828701611a19565b9350506020611f62868287016117c8565b9250506040611f73868287016117c8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611fbf6000850182611939565b506020820151611fd26020850182611939565b50505050565b6000611fe48383611fa9565b60408301905092915050565b6000602082019050919050565b600061200882611f7d565b6120128185611f88565b935061201d83611f99565b8060005b8381101561204e5781516120358882611fd8565b975061204083611ff0565b925050600181019050612021565b5085935050505092915050565b60006040820190508181036000830152612075818561196d565b905081810360208301526120898184611ffd565b90509392505050565b600082825260208201905092915050565b7f696e76616c696420737461727400000000000000000000000000000000000000600082015250565b60006120d9600d83612092565b91506120e4826120a3565b602082019050919050565b60006020820190508181036000830152612108816120cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121498261173f565b91506121548361173f565b925082820190508082111561216c5761216b61210f565b5b92915050565b600061217d8261173f565b91506121888361173f565b92508282039050818111156121a05761219f61210f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006121e08261173f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122125761221161210f565b5b600182019050919050565b7f7374616b652065786365656473206d6178207374616b65000000000000000000600082015250565b6000612253601783612092565b915061225e8261221d565b602082019050919050565b6000602082019050818103600083015261228281612246565b9050919050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006122bf601d83612092565b91506122ca82612289565b602082019050919050565b600060208201905081810360008301526122ee816122b2565b9050919050565b6122fe81611869565b82525050565b600082825260208201905092915050565b50565b6000612325600083612304565b915061233082612315565b600082019050919050565b600060a08201905061235060008301876122f5565b61235d60208301866122f5565b61236a6040830185611749565b6123776060830184611749565b818103608083015261238881612318565b905095945050505050565b60006040820190506123a860008301856122f5565b6123b56020830184611749565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b60006123f2601183612092565b91506123fd826123bc565b602082019050919050565b60006020820190508181036000830152612421816123e5565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b600061245e601c83612092565b915061246982612428565b602082019050919050565b6000602082019050818103600083015261248d81612451565b9050919050565b60006060820190506124a960008301866122f5565b6124b66020830185611749565b6124c36040830184611749565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f207374616b6573000000000000000000000000000000000000000000602082015250565b6000612527602b83612092565b9150612532826124cb565b604082019050919050565b600060208201905081810360008301526125568161251a565b9050919050565b600060808201905061257260008301876122f5565b61257f6020830186611749565b61258c6040830185611749565b6125996060830184611749565b95945050505050565b6000819050919050565b6125b5816125a2565b82525050565b60006020820190506125d060008301846125ac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201151aea91f717f3db9c926b91151f203a0f697e02c8b4676ded59ce5e5e28bcb64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063c2a672e011610097578063f155c6bf11610066578063f155c6bf146102c2578063f23a6e61146102f2578063f9a64cc014610322578063fea47c491461035357610100565b8063c2a672e01461023c578063c3b44ef414610258578063ce5ba45014610288578063d4967282146102a457610100565b80637a766460116100d35780637a766460146101a257806382bfefc8146101d2578063a694fc3a146101f0578063bc197c811461020c57610100565b806301ffc9a7146101055780631d3c613a14610135578063242c8e691461015357806371bdf9ea14610171575b600080fd5b61011f600480360381019061011a91906116dc565b610371565b60405161012c9190611724565b60405180910390f35b61013d6103eb565b60405161014a9190611758565b60405180910390f35b61015b61040f565b6040516101689190611796565b60405180910390f35b61018b600480360381019061018691906117dd565b610433565b6040516101999291906119cb565b60405180910390f35b6101bc60048036038101906101b79190611a2e565b6105f5565b6040516101c99190611758565b60405180910390f35b6101da610634565b6040516101e79190611aba565b60405180910390f35b61020a60048036038101906102059190611ad5565b610658565b005b61022660048036038101906102219190611d10565b61080f565b6040516102339190611dee565b60405180910390f35b61025660048036038101906102519190611e09565b610824565b005b610272600480360381019061026d9190611e09565b610a6a565b60405161027f9190611e78565b60405180910390f35b6102a2600480360381019061029d9190611ad5565b610acb565b005b6102ac610cec565b6040516102b99190611758565b60405180910390f35b6102dc60048036038101906102d79190611a2e565b610cfd565b6040516102e99190611758565b60405180910390f35b61030c60048036038101906103079190611e93565b610d4d565b6040516103199190611dee565b60405180910390f35b61033c60048036038101906103379190611f2a565b610d62565b60405161034a92919061205b565b60405180910390f35b61035b610f38565b6040516103689190611758565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e457506103e382610f3d565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806000610440610cec565b9050600081146105ed5780851061048c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610483906120ef565b60405180910390fd5b808486610499919061213e565b11156104ae5784816104ab9190612172565b93505b8367ffffffffffffffff8111156104c8576104c7611b18565b5b6040519080825280602002602001820160405280156104f65781602001602082028036833780820191505090505b5092508367ffffffffffffffff81111561051357610512611b18565b5b6040519080825280602002602001820160405280156105415781602001602082028036833780820191505090505b50915060005b848110156105eb5761056e818761055e919061213e565b6000610fa790919063ffffffff16565b858381518110610581576105806121a6565b5b6020026020010185848151811061059b5761059a6121a6565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806105e3906121d5565b915050610547565b505b509250929050565b600061060b826000610fd390919063ffffffff16565b610618576000905061062f565b61062c82600061100390919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081610683336105f5565b61068d919061213e565b11156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590612269565b60405180910390fd5b60008111610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906122d5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a33306000856040518563ffffffff1660e01b8152600401610771949392919061233b565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b5050505060006107ae336105f5565b90506107d13383836107c0919061213e565b60006110369092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3383604051610803929190612393565b60405180910390a15050565b600063bc197c8160e01b905095945050505050565b61087581600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061106b90919063ffffffff16565b6108b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ab90612408565b60405180910390fd5b60006108c03383610a6a565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516108fd919061213e565b111561093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093590612474565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600085600001516040518563ffffffff1660e01b81526004016109a2949392919061233b565b600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b50505050610a2582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061108e90919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e33838360000151604051610a5d93929190612494565b60405180910390a1505050565b610a72611656565b610ac382600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110d990919063ffffffff16565b905092915050565b60008111610b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b05906122d5565b60405180910390fd5b6000610b19336105f5565b905080821115610b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b559061253d565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008383610bb09190612172565b905060008103610bd457610bce33600061118090919063ffffffff16565b50610bec565b610bea338260006110369092919063ffffffff16565b505b610c5382604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111b09092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ca4906121d5565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc2133838642604051610cde949392919061255d565b60405180910390a150505050565b6000610cf86000611201565b905090565b6000610d46600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611216565b9050919050565b600063f23a6e6160e01b905095945050505050565b6060806000610d7086610cfd565b9050808510610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab906120ef565b60405180910390fd5b808486610dc1919061213e565b1115610dd6578481610dd39190612172565b93505b8367ffffffffffffffff811115610df057610def611b18565b5b604051908082528060200260200182016040528015610e1e5781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610e3b57610e3a611b18565b5b604051908082528060200260200182016040528015610e7457816020015b610e61611656565b815260200190600190039081610e595790505b50915060005b84811015610f2e57610ede8187610e91919061213e565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061122b90919063ffffffff16565b858381518110610ef157610ef06121a6565b5b60200260200101858481518110610f0b57610f0a6121a6565b5b602002602001018290528281525050508080610f26906121d5565b915050610e7a565b5050935093915050565b600081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610fba8660000186611299565b915091508160001c8160001c9350935050509250929050565b6000610ffb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6112d9565b905092915050565b600061102b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6112f9565b60001c905092915050565b6000611062846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b611379565b90509392505050565b60006110868260001b846000016113b490919063ffffffff16565b905092915050565b6000826002016000838152602001908152602001600020600080820160009055600182016000905550506110d18260001b846000016113cb90919063ffffffff16565b905092915050565b6110e1611656565b6000836002016000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600081602001511480156111345750611132848461106b565b155b1561117657826040517f3a054bd400000000000000000000000000000000000000000000000000000000815260040161116d9190611758565b60405180910390fd5b8091505092915050565b60006111a8836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6113e2565b905092915050565b60008184600201600085815260200190815260200160002060008201518160000155602082015181600101559050506111f88360001b8560000161141b90919063ffffffff16565b90509392505050565b600061120f82600001611432565b9050919050565b600061122482600001611447565b9050919050565b6000611235611656565b600061124d848660000161145c90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b60008060006112b4848660000161145c90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b60006112f182846000016113b490919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b8114801561132d575061132b84846112d9565b155b1561136f57826040517f02b5668600000000000000000000000000000000000000000000000000000000815260040161136691906125bb565b60405180910390fd5b8091505092915050565b600081846002016000858152602001908152602001600020819055506113ab838560000161141b90919063ffffffff16565b90509392505050565b60006113c38360000183611473565b905092915050565b60006113da8360000183611496565b905092915050565b60008260020160008381526020019081526020016000206000905561141382846000016113cb90919063ffffffff16565b905092915050565b600061142a83600001836115aa565b905092915050565b600061144082600001611447565b9050919050565b60006114558260000161161a565b9050919050565b600061146b836000018361162b565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461159e5760006001826114c89190612172565b90506000600186600001805490506114e09190612172565b905080821461154f576000866000018281548110611501576115006121a6565b5b9060005260206000200154905080876000018481548110611525576115246121a6565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611563576115626125d6565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506115a4565b60009150505b92915050565b60006115b68383611473565b61160f578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611614565b600090505b92915050565b600081600001805490509050919050565b6000826000018281548110611643576116426121a6565b5b9060005260206000200154905092915050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116b981611684565b81146116c457600080fd5b50565b6000813590506116d6816116b0565b92915050565b6000602082840312156116f2576116f161167a565b5b6000611700848285016116c7565b91505092915050565b60008115159050919050565b61171e81611709565b82525050565b60006020820190506117396000830184611715565b92915050565b6000819050919050565b6117528161173f565b82525050565b600060208201905061176d6000830184611749565b92915050565b600067ffffffffffffffff82169050919050565b61179081611773565b82525050565b60006020820190506117ab6000830184611787565b92915050565b6117ba8161173f565b81146117c557600080fd5b50565b6000813590506117d7816117b1565b92915050565b600080604083850312156117f4576117f361167a565b5b6000611802858286016117c8565b9250506020611813858286016117c8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061187482611849565b9050919050565b61188481611869565b82525050565b6000611896838361187b565b60208301905092915050565b6000602082019050919050565b60006118ba8261181d565b6118c48185611828565b93506118cf83611839565b8060005b838110156119005781516118e7888261188a565b97506118f2836118a2565b9250506001810190506118d3565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6119428161173f565b82525050565b60006119548383611939565b60208301905092915050565b6000602082019050919050565b60006119788261190d565b6119828185611918565b935061198d83611929565b8060005b838110156119be5781516119a58882611948565b97506119b083611960565b925050600181019050611991565b5085935050505092915050565b600060408201905081810360008301526119e581856118af565b905081810360208301526119f9818461196d565b90509392505050565b611a0b81611869565b8114611a1657600080fd5b50565b600081359050611a2881611a02565b92915050565b600060208284031215611a4457611a4361167a565b5b6000611a5284828501611a19565b91505092915050565b6000819050919050565b6000611a80611a7b611a7684611849565b611a5b565b611849565b9050919050565b6000611a9282611a65565b9050919050565b6000611aa482611a87565b9050919050565b611ab481611a99565b82525050565b6000602082019050611acf6000830184611aab565b92915050565b600060208284031215611aeb57611aea61167a565b5b6000611af9848285016117c8565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b5082611b07565b810181811067ffffffffffffffff82111715611b6f57611b6e611b18565b5b80604052505050565b6000611b82611670565b9050611b8e8282611b47565b919050565b600067ffffffffffffffff821115611bae57611bad611b18565b5b602082029050602081019050919050565b600080fd5b6000611bd7611bd284611b93565b611b78565b90508083825260208201905060208402830185811115611bfa57611bf9611bbf565b5b835b81811015611c235780611c0f88826117c8565b845260208401935050602081019050611bfc565b5050509392505050565b600082601f830112611c4257611c41611b02565b5b8135611c52848260208601611bc4565b91505092915050565b600080fd5b600067ffffffffffffffff821115611c7b57611c7a611b18565b5b611c8482611b07565b9050602081019050919050565b82818337600083830152505050565b6000611cb3611cae84611c60565b611b78565b905082815260208101848484011115611ccf57611cce611c5b565b5b611cda848285611c91565b509392505050565b600082601f830112611cf757611cf6611b02565b5b8135611d07848260208601611ca0565b91505092915050565b600080600080600060a08688031215611d2c57611d2b61167a565b5b6000611d3a88828901611a19565b9550506020611d4b88828901611a19565b945050604086013567ffffffffffffffff811115611d6c57611d6b61167f565b5b611d7888828901611c2d565b935050606086013567ffffffffffffffff811115611d9957611d9861167f565b5b611da588828901611c2d565b925050608086013567ffffffffffffffff811115611dc657611dc561167f565b5b611dd288828901611ce2565b9150509295509295909350565b611de881611684565b82525050565b6000602082019050611e036000830184611ddf565b92915050565b60008060408385031215611e2057611e1f61167a565b5b6000611e2e85828601611a19565b9250506020611e3f858286016117c8565b9150509250929050565b604082016000820151611e5f6000850182611939565b506020820151611e726020850182611939565b50505050565b6000604082019050611e8d6000830184611e49565b92915050565b600080600080600060a08688031215611eaf57611eae61167a565b5b6000611ebd88828901611a19565b9550506020611ece88828901611a19565b9450506040611edf888289016117c8565b9350506060611ef0888289016117c8565b925050608086013567ffffffffffffffff811115611f1157611f1061167f565b5b611f1d88828901611ce2565b9150509295509295909350565b600080600060608486031215611f4357611f4261167a565b5b6000611f5186828701611a19565b9350506020611f62868287016117c8565b9250506040611f73868287016117c8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611fbf6000850182611939565b506020820151611fd26020850182611939565b50505050565b6000611fe48383611fa9565b60408301905092915050565b6000602082019050919050565b600061200882611f7d565b6120128185611f88565b935061201d83611f99565b8060005b8381101561204e5781516120358882611fd8565b975061204083611ff0565b925050600181019050612021565b5085935050505092915050565b60006040820190508181036000830152612075818561196d565b905081810360208301526120898184611ffd565b90509392505050565b600082825260208201905092915050565b7f696e76616c696420737461727400000000000000000000000000000000000000600082015250565b60006120d9600d83612092565b91506120e4826120a3565b602082019050919050565b60006020820190508181036000830152612108816120cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121498261173f565b91506121548361173f565b925082820190508082111561216c5761216b61210f565b5b92915050565b600061217d8261173f565b91506121888361173f565b92508282039050818111156121a05761219f61210f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006121e08261173f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122125761221161210f565b5b600182019050919050565b7f7374616b652065786365656473206d6178207374616b65000000000000000000600082015250565b6000612253601783612092565b915061225e8261221d565b602082019050919050565b6000602082019050818103600083015261228281612246565b9050919050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006122bf601d83612092565b91506122ca82612289565b602082019050919050565b600060208201905081810360008301526122ee816122b2565b9050919050565b6122fe81611869565b82525050565b600082825260208201905092915050565b50565b6000612325600083612304565b915061233082612315565b600082019050919050565b600060a08201905061235060008301876122f5565b61235d60208301866122f5565b61236a6040830185611749565b6123776060830184611749565b818103608083015261238881612318565b905095945050505050565b60006040820190506123a860008301856122f5565b6123b56020830184611749565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b60006123f2601183612092565b91506123fd826123bc565b602082019050919050565b60006020820190508181036000830152612421816123e5565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b600061245e601c83612092565b915061246982612428565b602082019050919050565b6000602082019050818103600083015261248d81612451565b9050919050565b60006060820190506124a960008301866122f5565b6124b66020830185611749565b6124c36040830184611749565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f207374616b6573000000000000000000000000000000000000000000602082015250565b6000612527602b83612092565b9150612532826124cb565b604082019050919050565b600060208201905081810360008301526125568161251a565b9050919050565b600060808201905061257260008301876122f5565b61257f6020830186611749565b61258c6040830185611749565b6125996060830184611749565b95945050505050565b6000819050919050565b6125b5816125a2565b82525050565b60006020820190506125d060008301846125ac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201151aea91f717f3db9c926b91151f203a0f697e02c8b4676ded59ce5e5e28bcb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "EnumerableMapNonexistentKey(bytes32)": [
        {
          "details": "Query for a nonexistent map key."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3228,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "stakes",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressToUintMap)1618_storage"
      },
      {
        "astId": 3232,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "applyIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3237,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "applies",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UintToApply)3761_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintToApply)3761_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableApply.UintToApply)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToApply)3761_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApplyInfo)3752_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableApply.ApplyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplyInfo)3752_storage"
      },
      "t_struct(AddressToUintMap)1618_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 1617,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)960_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ApplyInfo)3752_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.ApplyInfo",
        "members": [
          {
            "astId": 3749,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3751,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "applyTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)2258_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2257,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2064_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)960_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 955,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2258_storage"
          },
          {
            "astId": 959,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2064_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2059,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2063,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToApply)3761_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.UintToApply",
        "members": [
          {
            "astId": 3755,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2258_storage"
          },
          {
            "astId": 3760,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(ApplyInfo)3752_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}