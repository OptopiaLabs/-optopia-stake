{
  "address": "0xC7Fb91e1A39b0E7D62eD5103E2E2a81D149564a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyTime",
          "type": "uint256"
        }
      ],
      "name": "ApplyUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCKTIME",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXSTAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "applyLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "getApply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "applyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnumerableApply.ApplyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakesOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applyId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6811d7ee0bba77c6b7719847be128c3cd2e732a0b21b7ec52580d1cb55de4c90",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xC7Fb91e1A39b0E7D62eD5103E2E2a81D149564a4",
    "transactionIndex": 1,
    "gasUsed": "2129137",
    "logsBloom": "0x
    "blockHash": "0x51c16ab218bdd931420c9f9b96c9dd56a9983c48416490da8d5122491f3ec276",
    "transactionHash": "0x6811d7ee0bba77c6b7719847be128c3cd2e732a0b21b7ec52580d1cb55de4c90",
    "logs": [],
    "blockNumber": 3719810,
    "cumulativeGasUsed": "2172952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82e854f3f7550f13848999d9064975753BE4284b"
  ],
  "numDeployments": 2,
  "solcInputHash": "85fe67a83e625234a2fa36ee6301bbae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"name\":\"ApplyUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKTIME\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXSTAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"applyLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"getApply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EnumerableApply.ApplyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VigorStoneStake.sol\":\"VigorStoneStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/core/VigorStoneStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"../dependencies/EnumerableApply.sol\\\";\\n\\ncontract VigorStoneStake is ERC1155Holder {\\n\\tusing EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\tusing EnumerableApply for EnumerableApply.UintToApply;\\n\\n\\tuint256 public constant TOKENID = 0;\\n\\tuint64 public immutable LOCKTIME = 7 days;\\n\\tIERC1155 public immutable TOKEN;\\n\\tuint256 public immutable MAXSTAKE = 5;\\n\\n\\tEnumerableMap.AddressToUintMap internal stakes;\\n\\n\\tmapping(address => uint256) internal applyIds;\\n\\n\\tmapping(address => EnumerableApply.UintToApply) internal applies;\\n\\n\\tevent Staked(address account, uint256 amount);\\n\\n\\tevent ApplyUnstaked(address account, uint256 applyId, uint256 amount, uint256 applyTime);\\n\\n\\tevent Unstaked(address account, uint256 applyId, uint256 amount);\\n\\n\\tconstructor(IERC1155 _token) {\\n\\t\\tTOKEN = _token;\\n\\t}\\n\\n\\tfunction stake(uint256 amount) external {\\n\\t\\trequire(getStake(msg.sender) + amount <= MAXSTAKE, \\\"stake exceeds max stake\\\");\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tTOKEN.safeTransferFrom(msg.sender, address(this), TOKENID, amount, \\\"\\\");\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\tstakes.set(msg.sender, oldAmount + amount);\\n\\t\\temit Staked(msg.sender, amount);\\n\\t}\\n\\n\\tfunction applyUnstake(uint256 amount) external {\\n\\t\\trequire(amount > 0, \\\"amount must be greater than 0\\\");\\n\\t\\tuint256 oldAmount = getStake(msg.sender);\\n\\t\\trequire(amount <= oldAmount, \\\"amount must be less than or equal to stakes\\\");\\n\\t\\tuint256 id = applyIds[msg.sender];\\n\\t\\tuint256 newStake = oldAmount - amount;\\n\\t\\tif (newStake == 0) {\\n\\t\\t\\tstakes.remove(msg.sender);\\n\\t\\t} else {\\n\\t\\t\\tstakes.set(msg.sender, newStake);\\n\\t\\t}\\n\\t\\tapplies[msg.sender].set(id, EnumerableApply.ApplyInfo(amount, block.timestamp));\\n\\t\\tapplyIds[msg.sender]++;\\n\\t\\temit ApplyUnstaked(msg.sender, id, amount, block.timestamp);\\n\\t}\\n\\n\\tfunction unstake(address to, uint256 applyId) external {\\n\\t\\trequire(applies[msg.sender].contains(applyId), \\\"nonexistent apply\\\");\\n\\t\\tEnumerableApply.ApplyInfo memory info = getApply(msg.sender, applyId);\\n\\t\\trequire(info.applyTime + LOCKTIME <= block.timestamp, \\\"unstake locktime not expired\\\");\\n\\t\\tTOKEN.safeTransferFrom(address(this), to, TOKENID, info.amount, \\\"\\\");\\n\\t\\tapplies[msg.sender].remove(applyId);\\n\\t\\temit Unstaked(msg.sender, applyId, info.amount);\\n\\t}\\n\\n\\tfunction getStake(address account) public view returns (uint256) {\\n\\t\\tif (!stakes.contains(account)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn stakes.get(account);\\n\\t}\\n\\n\\tfunction getApply(address account, uint256 applyId) public view returns (EnumerableApply.ApplyInfo memory info) {\\n\\t\\treturn applies[account].get(applyId);\\n\\t}\\n\\n\\tfunction stakesOf(uint256 start, uint256 amount) public view returns (address[] memory stakers, uint256[] memory amounts) {\\n\\t\\tuint256 size = stakeLength();\\n\\t\\tif (size != 0) {\\n\\t\\t\\tif (start < size) {\\n\\t\\t\\t\\tif (start + amount > size) {\\n\\t\\t\\t\\t\\tamount = size - start;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstakers = new address[](amount);\\n\\t\\t\\t\\tamounts = new uint256[](amount);\\n\\t\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t\\t(stakers[i], amounts[i]) = stakes.at(start + i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction stakeLength() public view returns (uint256) {\\n\\t\\treturn stakes.length();\\n\\t}\\n\\n\\tfunction applyLength(address account) public view returns (uint256) {\\n\\t\\treturn applies[account].length();\\n\\t}\\n\\n\\tfunction applyOf(address account, uint256 start, uint256 amount) public view returns (uint256[] memory ids, EnumerableApply.ApplyInfo[] memory infos) {\\n\\t\\tuint256 size = applyLength(account);\\n\\t\\tif (size != 0) {\\n\\t\\t\\tif (start < size) {\\n\\t\\t\\t\\tif (start + amount > size) {\\n\\t\\t\\t\\t\\tamount = size - start;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tids = new uint256[](amount);\\n\\t\\t\\t\\tinfos = new EnumerableApply.ApplyInfo[](amount);\\n\\t\\t\\t\\tfor (uint256 i = 0; i < amount; i++) {\\n\\t\\t\\t\\t\\t(ids[i], infos[i]) = applies[account].at(start + i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x233932e858c3e1595cd07c659001ed1718f6b00018140e6d41d28ea225a3fd92\",\"license\":\"MIT\"},\"contracts/dependencies/EnumerableApply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableApply {\\n\\tusing EnumerableSet for EnumerableSet.Bytes32Set;\\n\\terror EnumerableMapNonexistentKey(uint256 key);\\n\\n\\tstruct ApplyInfo {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 applyTime;\\n\\t}\\n\\n\\tstruct UintToApply {\\n\\t\\tEnumerableSet.Bytes32Set _keys;\\n\\t\\tmapping(uint256 => ApplyInfo) _values;\\n\\t}\\n\\n\\tfunction set(UintToApply storage map, uint256 key, ApplyInfo memory value) internal returns (bool) {\\n\\t\\tmap._values[key] = value;\\n\\t\\treturn map._keys.add(bytes32(key));\\n\\t}\\n\\n\\tfunction remove(UintToApply storage map, uint256 key) internal returns (bool) {\\n\\t\\tdelete map._values[key];\\n\\t\\treturn map._keys.remove(bytes32(key));\\n\\t}\\n\\n\\tfunction contains(UintToApply storage map, uint256 key) internal view returns (bool) {\\n\\t\\treturn map._keys.contains(bytes32(key));\\n\\t}\\n\\n\\tfunction length(UintToApply storage map) internal view returns (uint256) {\\n\\t\\treturn map._keys.length();\\n\\t}\\n\\n\\tfunction at(UintToApply storage map, uint256 index) internal view returns (uint256, ApplyInfo memory) {\\n\\t\\tbytes32 key = map._keys.at(index);\\n\\t\\treturn (uint256(key), map._values[uint256(key)]);\\n\\t}\\n\\n\\tfunction tryGet(UintToApply storage map, uint256 key) internal view returns (bool, ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0) {\\n\\t\\t\\treturn (contains(map, key), ApplyInfo({ amount: 0, applyTime: 0 }));\\n\\t\\t} else {\\n\\t\\t\\treturn (true, value);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction get(UintToApply storage map, uint256 key) internal view returns (ApplyInfo memory) {\\n\\t\\tApplyInfo memory value = map._values[key];\\n\\t\\tif (value.applyTime == 0 && !contains(map, key)) {\\n\\t\\t\\trevert EnumerableMapNonexistentKey(key);\\n\\t\\t}\\n\\t\\treturn value;\\n\\t}\\n\\n\\tfunction keys(UintToApply storage map) internal view returns (bytes32[] memory) {\\n\\t\\treturn map._keys.values();\\n\\t}\\n}\\n\",\"keccak256\":\"0xba73d341d38bd752b9c5148a86c65f6b14f70cc6b757d11168f2ef50106aeff7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405262093a8067ffffffffffffffff1660809067ffffffffffffffff16815250600560c0908152503480156200003757600080fd5b506040516200272e3803806200272e83398181016040528101906200005d919062000116565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000148565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ca826200009d565b9050919050565b6000620000de82620000bd565b9050919050565b620000f081620000d1565b8114620000fc57600080fd5b50565b6000815190506200011081620000e5565b92915050565b6000602082840312156200012f576200012e62000098565b5b60006200013f84828501620000ff565b91505092915050565b60805160a05160c05161259a62000194600039600081816103ed01526106210152600081816105fd015281816106da0152610907015260008181610411015261088c015261259a6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063c2a672e011610097578063f155c6bf11610066578063f155c6bf146102c2578063f23a6e61146102f2578063f9a64cc014610322578063fea47c491461035357610100565b8063c2a672e01461023c578063c3b44ef414610258578063ce5ba45014610288578063d4967282146102a457610100565b80637a766460116100d35780637a766460146101a257806382bfefc8146101d2578063a694fc3a146101f0578063bc197c811461020c57610100565b806301ffc9a7146101055780631d3c613a14610135578063242c8e691461015357806371bdf9ea14610171575b600080fd5b61011f600480360381019061011a919061166f565b610371565b60405161012c91906116b7565b60405180910390f35b61013d6103eb565b60405161014a91906116eb565b60405180910390f35b61015b61040f565b6040516101689190611729565b60405180910390f35b61018b60048036038101906101869190611770565b610433565b60405161019992919061195e565b60405180910390f35b6101bc60048036038101906101b791906119c1565b6105bc565b6040516101c991906116eb565b60405180910390f35b6101da6105fb565b6040516101e79190611a4d565b60405180910390f35b61020a60048036038101906102059190611a68565b61061f565b005b61022660048036038101906102219190611ca3565b6107d6565b6040516102339190611d81565b60405180910390f35b61025660048036038101906102519190611d9c565b6107eb565b005b610272600480360381019061026d9190611d9c565b610a31565b60405161027f9190611e0b565b60405180910390f35b6102a2600480360381019061029d9190611a68565b610a92565b005b6102ac610cb3565b6040516102b991906116eb565b60405180910390f35b6102dc60048036038101906102d791906119c1565b610cc4565b6040516102e991906116eb565b60405180910390f35b61030c60048036038101906103079190611e26565b610d14565b6040516103199190611d81565b60405180910390f35b61033c60048036038101906103379190611ebd565b610d29565b60405161034a929190611fee565b60405180910390f35b61035b610ecf565b60405161036891906116eb565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e457506103e382610ed4565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806000610440610cb3565b9050600081146105b457808510156105b35780848661045f9190612054565b11156104745784816104719190612088565b93505b8367ffffffffffffffff81111561048e5761048d611aab565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b5092508367ffffffffffffffff8111156104d9576104d8611aab565b5b6040519080825280602002602001820160405280156105075781602001602082028036833780820191505090505b50915060005b848110156105b15761053481876105249190612054565b6000610f3e90919063ffffffff16565b858381518110610547576105466120bc565b5b60200260200101858481518110610561576105606120bc565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806105a9906120eb565b91505061050d565b505b5b509250929050565b60006105d2826000610f6a90919063ffffffff16565b6105df57600090506105f6565b6105f3826000610f9a90919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008161064a336105bc565b6106549190612054565b1115610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90612190565b60405180910390fd5b600081116106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf906121fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a33306000856040518563ffffffff1660e01b81526004016107389493929190612262565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b505050506000610775336105bc565b90506107983383836107879190612054565b6000610fcd9092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d33836040516107ca9291906122ba565b60405180910390a15050565b600063bc197c8160e01b905095945050505050565b61083c81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061100290919063ffffffff16565b61087b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108729061232f565b60405180910390fd5b60006108873383610a31565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516108c49190612054565b1115610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc9061239b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600085600001516040518563ffffffff1660e01b81526004016109699493929190612262565b600060405180830381600087803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b505050506109ec82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061102590919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e33838360000151604051610a24939291906123bb565b60405180910390a1505050565b610a396115e9565b610a8a82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061107090919063ffffffff16565b905092915050565b60008111610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc906121fc565b60405180910390fd5b6000610ae0336105bc565b905080821115610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c90612464565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008383610b779190612088565b905060008103610b9b57610b9533600061111790919063ffffffff16565b50610bb3565b610bb133826000610fcd9092919063ffffffff16565b505b610c1a82604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111479092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c6b906120eb565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc2133838642604051610ca59493929190612484565b60405180910390a150505050565b6000610cbf6000611198565b905090565b6000610d0d600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111ad565b9050919050565b600063f23a6e6160e01b905095945050505050565b6060806000610d3786610cc4565b905060008114610ec65780851015610ec557808486610d569190612054565b1115610d6b578481610d689190612088565b93505b8367ffffffffffffffff811115610d8557610d84611aab565b5b604051908082528060200260200182016040528015610db35781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610dd057610dcf611aab565b5b604051908082528060200260200182016040528015610e0957816020015b610df66115e9565b815260200190600190039081610dee5790505b50915060005b84811015610ec357610e738187610e269190612054565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111c290919063ffffffff16565b858381518110610e8657610e856120bc565b5b60200260200101858481518110610ea057610e9f6120bc565b5b602002602001018290528281525050508080610ebb906120eb565b915050610e0f565b505b5b50935093915050565b600081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610f518660000186611230565b915091508160001c8160001c9350935050509250929050565b6000610f92836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611270565b905092915050565b6000610fc2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611290565b60001c905092915050565b6000610ff9846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b61130c565b90509392505050565b600061101d8260001b8460000161134790919063ffffffff16565b905092915050565b6000826002016000838152602001908152602001600020600080820160009055600182016000905550506110688260001b8460000161135e90919063ffffffff16565b905092915050565b6110786115e9565b6000836002016000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600081602001511480156110cb57506110c98484611002565b155b1561110d57826040517f3a054bd400000000000000000000000000000000000000000000000000000000815260040161110491906116eb565b60405180910390fd5b8091505092915050565b600061113f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611375565b905092915050565b600081846002016000858152602001908152602001600020600082015181600001556020820151816001015590505061118f8360001b856000016113ae90919063ffffffff16565b90509392505050565b60006111a6826000016113c5565b9050919050565b60006111bb826000016113da565b9050919050565b60006111cc6115e9565b60006111e484866000016113ef90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b600080600061124b84866000016113ef90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b6000611288828460000161134790919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b811415806112c357506112c28484611270565b5b611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990612515565b60405180910390fd5b8091505092915050565b6000818460020160008581526020019081526020016000208190555061133e83856000016113ae90919063ffffffff16565b90509392505050565b60006113568360000183611406565b905092915050565b600061136d8360000183611429565b905092915050565b6000826002016000838152602001908152602001600020600090556113a6828460000161135e90919063ffffffff16565b905092915050565b60006113bd836000018361153d565b905092915050565b60006113d3826000016113da565b9050919050565b60006113e8826000016115ad565b9050919050565b60006113fe83600001836115be565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461153157600060018261145b9190612088565b90506000600186600001805490506114739190612088565b90508181146114e2576000866000018281548110611494576114936120bc565b5b90600052602060002001549050808760000184815481106114b8576114b76120bc565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806114f6576114f5612535565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611537565b60009150505b92915050565b60006115498383611406565b6115a25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506115a7565b600090505b92915050565b600081600001805490509050919050565b60008260000182815481106115d6576115d56120bc565b5b9060005260206000200154905092915050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61164c81611617565b811461165757600080fd5b50565b60008135905061166981611643565b92915050565b6000602082840312156116855761168461160d565b5b60006116938482850161165a565b91505092915050565b60008115159050919050565b6116b18161169c565b82525050565b60006020820190506116cc60008301846116a8565b92915050565b6000819050919050565b6116e5816116d2565b82525050565b600060208201905061170060008301846116dc565b92915050565b600067ffffffffffffffff82169050919050565b61172381611706565b82525050565b600060208201905061173e600083018461171a565b92915050565b61174d816116d2565b811461175857600080fd5b50565b60008135905061176a81611744565b92915050565b600080604083850312156117875761178661160d565b5b60006117958582860161175b565b92505060206117a68582860161175b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611807826117dc565b9050919050565b611817816117fc565b82525050565b6000611829838361180e565b60208301905092915050565b6000602082019050919050565b600061184d826117b0565b61185781856117bb565b9350611862836117cc565b8060005b8381101561189357815161187a888261181d565b975061188583611835565b925050600181019050611866565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118d5816116d2565b82525050565b60006118e783836118cc565b60208301905092915050565b6000602082019050919050565b600061190b826118a0565b61191581856118ab565b9350611920836118bc565b8060005b8381101561195157815161193888826118db565b9750611943836118f3565b925050600181019050611924565b5085935050505092915050565b600060408201905081810360008301526119788185611842565b9050818103602083015261198c8184611900565b90509392505050565b61199e816117fc565b81146119a957600080fd5b50565b6000813590506119bb81611995565b92915050565b6000602082840312156119d7576119d661160d565b5b60006119e5848285016119ac565b91505092915050565b6000819050919050565b6000611a13611a0e611a09846117dc565b6119ee565b6117dc565b9050919050565b6000611a25826119f8565b9050919050565b6000611a3782611a1a565b9050919050565b611a4781611a2c565b82525050565b6000602082019050611a626000830184611a3e565b92915050565b600060208284031215611a7e57611a7d61160d565b5b6000611a8c8482850161175b565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ae382611a9a565b810181811067ffffffffffffffff82111715611b0257611b01611aab565b5b80604052505050565b6000611b15611603565b9050611b218282611ada565b919050565b600067ffffffffffffffff821115611b4157611b40611aab565b5b602082029050602081019050919050565b600080fd5b6000611b6a611b6584611b26565b611b0b565b90508083825260208201905060208402830185811115611b8d57611b8c611b52565b5b835b81811015611bb65780611ba2888261175b565b845260208401935050602081019050611b8f565b5050509392505050565b600082601f830112611bd557611bd4611a95565b5b8135611be5848260208601611b57565b91505092915050565b600080fd5b600067ffffffffffffffff821115611c0e57611c0d611aab565b5b611c1782611a9a565b9050602081019050919050565b82818337600083830152505050565b6000611c46611c4184611bf3565b611b0b565b905082815260208101848484011115611c6257611c61611bee565b5b611c6d848285611c24565b509392505050565b600082601f830112611c8a57611c89611a95565b5b8135611c9a848260208601611c33565b91505092915050565b600080600080600060a08688031215611cbf57611cbe61160d565b5b6000611ccd888289016119ac565b9550506020611cde888289016119ac565b945050604086013567ffffffffffffffff811115611cff57611cfe611612565b5b611d0b88828901611bc0565b935050606086013567ffffffffffffffff811115611d2c57611d2b611612565b5b611d3888828901611bc0565b925050608086013567ffffffffffffffff811115611d5957611d58611612565b5b611d6588828901611c75565b9150509295509295909350565b611d7b81611617565b82525050565b6000602082019050611d966000830184611d72565b92915050565b60008060408385031215611db357611db261160d565b5b6000611dc1858286016119ac565b9250506020611dd28582860161175b565b9150509250929050565b604082016000820151611df260008501826118cc565b506020820151611e0560208501826118cc565b50505050565b6000604082019050611e206000830184611ddc565b92915050565b600080600080600060a08688031215611e4257611e4161160d565b5b6000611e50888289016119ac565b9550506020611e61888289016119ac565b9450506040611e728882890161175b565b9350506060611e838882890161175b565b925050608086013567ffffffffffffffff811115611ea457611ea3611612565b5b611eb088828901611c75565b9150509295509295909350565b600080600060608486031215611ed657611ed561160d565b5b6000611ee4868287016119ac565b9350506020611ef58682870161175b565b9250506040611f068682870161175b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611f5260008501826118cc565b506020820151611f6560208501826118cc565b50505050565b6000611f778383611f3c565b60408301905092915050565b6000602082019050919050565b6000611f9b82611f10565b611fa58185611f1b565b9350611fb083611f2c565b8060005b83811015611fe1578151611fc88882611f6b565b9750611fd383611f83565b925050600181019050611fb4565b5085935050505092915050565b600060408201905081810360008301526120088185611900565b9050818103602083015261201c8184611f90565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061205f826116d2565b915061206a836116d2565b925082820190508082111561208257612081612025565b5b92915050565b6000612093826116d2565b915061209e836116d2565b92508282039050818111156120b6576120b5612025565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006120f6826116d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361212857612127612025565b5b600182019050919050565b600082825260208201905092915050565b7f7374616b652065786365656473206d6178207374616b65000000000000000000600082015250565b600061217a601783612133565b915061218582612144565b602082019050919050565b600060208201905081810360008301526121a98161216d565b9050919050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006121e6601d83612133565b91506121f1826121b0565b602082019050919050565b60006020820190508181036000830152612215816121d9565b9050919050565b612225816117fc565b82525050565b600082825260208201905092915050565b50565b600061224c60008361222b565b91506122578261223c565b600082019050919050565b600060a082019050612277600083018761221c565b612284602083018661221c565b61229160408301856116dc565b61229e60608301846116dc565b81810360808301526122af8161223f565b905095945050505050565b60006040820190506122cf600083018561221c565b6122dc60208301846116dc565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b6000612319601183612133565b9150612324826122e3565b602082019050919050565b600060208201905081810360008301526123488161230c565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b6000612385601c83612133565b91506123908261234f565b602082019050919050565b600060208201905081810360008301526123b481612378565b9050919050565b60006060820190506123d0600083018661221c565b6123dd60208301856116dc565b6123ea60408301846116dc565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f207374616b6573000000000000000000000000000000000000000000602082015250565b600061244e602b83612133565b9150612459826123f2565b604082019050919050565b6000602082019050818103600083015261247d81612441565b9050919050565b6000608082019050612499600083018761221c565b6124a660208301866116dc565b6124b360408301856116dc565b6124c060608301846116dc565b95945050505050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b60006124ff601e83612133565b915061250a826124c9565b602082019050919050565b6000602082019050818103600083015261252e816124f2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122035b22a68706ad726914f71564388500d9dc3b3f04524869cfb4369687a94408664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063c2a672e011610097578063f155c6bf11610066578063f155c6bf146102c2578063f23a6e61146102f2578063f9a64cc014610322578063fea47c491461035357610100565b8063c2a672e01461023c578063c3b44ef414610258578063ce5ba45014610288578063d4967282146102a457610100565b80637a766460116100d35780637a766460146101a257806382bfefc8146101d2578063a694fc3a146101f0578063bc197c811461020c57610100565b806301ffc9a7146101055780631d3c613a14610135578063242c8e691461015357806371bdf9ea14610171575b600080fd5b61011f600480360381019061011a919061166f565b610371565b60405161012c91906116b7565b60405180910390f35b61013d6103eb565b60405161014a91906116eb565b60405180910390f35b61015b61040f565b6040516101689190611729565b60405180910390f35b61018b60048036038101906101869190611770565b610433565b60405161019992919061195e565b60405180910390f35b6101bc60048036038101906101b791906119c1565b6105bc565b6040516101c991906116eb565b60405180910390f35b6101da6105fb565b6040516101e79190611a4d565b60405180910390f35b61020a60048036038101906102059190611a68565b61061f565b005b61022660048036038101906102219190611ca3565b6107d6565b6040516102339190611d81565b60405180910390f35b61025660048036038101906102519190611d9c565b6107eb565b005b610272600480360381019061026d9190611d9c565b610a31565b60405161027f9190611e0b565b60405180910390f35b6102a2600480360381019061029d9190611a68565b610a92565b005b6102ac610cb3565b6040516102b991906116eb565b60405180910390f35b6102dc60048036038101906102d791906119c1565b610cc4565b6040516102e991906116eb565b60405180910390f35b61030c60048036038101906103079190611e26565b610d14565b6040516103199190611d81565b60405180910390f35b61033c60048036038101906103379190611ebd565b610d29565b60405161034a929190611fee565b60405180910390f35b61035b610ecf565b60405161036891906116eb565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e457506103e382610ed4565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060806000610440610cb3565b9050600081146105b457808510156105b35780848661045f9190612054565b11156104745784816104719190612088565b93505b8367ffffffffffffffff81111561048e5761048d611aab565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b5092508367ffffffffffffffff8111156104d9576104d8611aab565b5b6040519080825280602002602001820160405280156105075781602001602082028036833780820191505090505b50915060005b848110156105b15761053481876105249190612054565b6000610f3e90919063ffffffff16565b858381518110610547576105466120bc565b5b60200260200101858481518110610561576105606120bc565b5b60200260200101828152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505080806105a9906120eb565b91505061050d565b505b5b509250929050565b60006105d2826000610f6a90919063ffffffff16565b6105df57600090506105f6565b6105f3826000610f9a90919063ffffffff16565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008161064a336105bc565b6106549190612054565b1115610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90612190565b60405180910390fd5b600081116106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf906121fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a33306000856040518563ffffffff1660e01b81526004016107389493929190612262565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b505050506000610775336105bc565b90506107983383836107879190612054565b6000610fcd9092919063ffffffff16565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d33836040516107ca9291906122ba565b60405180910390a15050565b600063bc197c8160e01b905095945050505050565b61083c81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061100290919063ffffffff16565b61087b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108729061232f565b60405180910390fd5b60006108873383610a31565b9050427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1682602001516108c49190612054565b1115610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc9061239b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600085600001516040518563ffffffff1660e01b81526004016109699493929190612262565b600060405180830381600087803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b505050506109ec82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061102590919063ffffffff16565b507f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e33838360000151604051610a24939291906123bb565b60405180910390a1505050565b610a396115e9565b610a8a82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061107090919063ffffffff16565b905092915050565b60008111610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc906121fc565b60405180910390fd5b6000610ae0336105bc565b905080821115610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c90612464565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008383610b779190612088565b905060008103610b9b57610b9533600061111790919063ffffffff16565b50610bb3565b610bb133826000610fcd9092919063ffffffff16565b505b610c1a82604051806040016040528087815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111479092919063ffffffff16565b50600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c6b906120eb565b91905055507fb3a097b9b09df137b8d0b2cd75a0006fdbeb32e0cc39366c7fa0929d1ce9fc2133838642604051610ca59493929190612484565b60405180910390a150505050565b6000610cbf6000611198565b905090565b6000610d0d600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111ad565b9050919050565b600063f23a6e6160e01b905095945050505050565b6060806000610d3786610cc4565b905060008114610ec65780851015610ec557808486610d569190612054565b1115610d6b578481610d689190612088565b93505b8367ffffffffffffffff811115610d8557610d84611aab565b5b604051908082528060200260200182016040528015610db35781602001602082028036833780820191505090505b5092508367ffffffffffffffff811115610dd057610dcf611aab565b5b604051908082528060200260200182016040528015610e0957816020015b610df66115e9565b815260200190600190039081610dee5790505b50915060005b84811015610ec357610e738187610e269190612054565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111c290919063ffffffff16565b858381518110610e8657610e856120bc565b5b60200260200101858481518110610ea057610e9f6120bc565b5b602002602001018290528281525050508080610ebb906120eb565b915050610e0f565b505b5b50935093915050565b600081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610f518660000186611230565b915091508160001c8160001c9350935050509250929050565b6000610f92836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611270565b905092915050565b6000610fc2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611290565b60001c905092915050565b6000610ff9846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8460001b61130c565b90509392505050565b600061101d8260001b8460000161134790919063ffffffff16565b905092915050565b6000826002016000838152602001908152602001600020600080820160009055600182016000905550506110688260001b8460000161135e90919063ffffffff16565b905092915050565b6110786115e9565b6000836002016000848152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600081602001511480156110cb57506110c98484611002565b155b1561110d57826040517f3a054bd400000000000000000000000000000000000000000000000000000000815260040161110491906116eb565b60405180910390fd5b8091505092915050565b600061113f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611375565b905092915050565b600081846002016000858152602001908152602001600020600082015181600001556020820151816001015590505061118f8360001b856000016113ae90919063ffffffff16565b90509392505050565b60006111a6826000016113c5565b9050919050565b60006111bb826000016113da565b9050919050565b60006111cc6115e9565b60006111e484866000016113ef90919063ffffffff16565b90508060001c8560020160008360001c81526020019081526020016000208060405180604001604052908160008201548152602001600182015481525050905092509250509250929050565b600080600061124b84866000016113ef90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b6000611288828460000161134790919063ffffffff16565b905092915050565b6000808360020160008481526020019081526020016000205490506000801b811415806112c357506112c28484611270565b5b611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990612515565b60405180910390fd5b8091505092915050565b6000818460020160008581526020019081526020016000208190555061133e83856000016113ae90919063ffffffff16565b90509392505050565b60006113568360000183611406565b905092915050565b600061136d8360000183611429565b905092915050565b6000826002016000838152602001908152602001600020600090556113a6828460000161135e90919063ffffffff16565b905092915050565b60006113bd836000018361153d565b905092915050565b60006113d3826000016113da565b9050919050565b60006113e8826000016115ad565b9050919050565b60006113fe83600001836115be565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461153157600060018261145b9190612088565b90506000600186600001805490506114739190612088565b90508181146114e2576000866000018281548110611494576114936120bc565b5b90600052602060002001549050808760000184815481106114b8576114b76120bc565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806114f6576114f5612535565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611537565b60009150505b92915050565b60006115498383611406565b6115a25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506115a7565b600090505b92915050565b600081600001805490509050919050565b60008260000182815481106115d6576115d56120bc565b5b9060005260206000200154905092915050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61164c81611617565b811461165757600080fd5b50565b60008135905061166981611643565b92915050565b6000602082840312156116855761168461160d565b5b60006116938482850161165a565b91505092915050565b60008115159050919050565b6116b18161169c565b82525050565b60006020820190506116cc60008301846116a8565b92915050565b6000819050919050565b6116e5816116d2565b82525050565b600060208201905061170060008301846116dc565b92915050565b600067ffffffffffffffff82169050919050565b61172381611706565b82525050565b600060208201905061173e600083018461171a565b92915050565b61174d816116d2565b811461175857600080fd5b50565b60008135905061176a81611744565b92915050565b600080604083850312156117875761178661160d565b5b60006117958582860161175b565b92505060206117a68582860161175b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611807826117dc565b9050919050565b611817816117fc565b82525050565b6000611829838361180e565b60208301905092915050565b6000602082019050919050565b600061184d826117b0565b61185781856117bb565b9350611862836117cc565b8060005b8381101561189357815161187a888261181d565b975061188583611835565b925050600181019050611866565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118d5816116d2565b82525050565b60006118e783836118cc565b60208301905092915050565b6000602082019050919050565b600061190b826118a0565b61191581856118ab565b9350611920836118bc565b8060005b8381101561195157815161193888826118db565b9750611943836118f3565b925050600181019050611924565b5085935050505092915050565b600060408201905081810360008301526119788185611842565b9050818103602083015261198c8184611900565b90509392505050565b61199e816117fc565b81146119a957600080fd5b50565b6000813590506119bb81611995565b92915050565b6000602082840312156119d7576119d661160d565b5b60006119e5848285016119ac565b91505092915050565b6000819050919050565b6000611a13611a0e611a09846117dc565b6119ee565b6117dc565b9050919050565b6000611a25826119f8565b9050919050565b6000611a3782611a1a565b9050919050565b611a4781611a2c565b82525050565b6000602082019050611a626000830184611a3e565b92915050565b600060208284031215611a7e57611a7d61160d565b5b6000611a8c8482850161175b565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ae382611a9a565b810181811067ffffffffffffffff82111715611b0257611b01611aab565b5b80604052505050565b6000611b15611603565b9050611b218282611ada565b919050565b600067ffffffffffffffff821115611b4157611b40611aab565b5b602082029050602081019050919050565b600080fd5b6000611b6a611b6584611b26565b611b0b565b90508083825260208201905060208402830185811115611b8d57611b8c611b52565b5b835b81811015611bb65780611ba2888261175b565b845260208401935050602081019050611b8f565b5050509392505050565b600082601f830112611bd557611bd4611a95565b5b8135611be5848260208601611b57565b91505092915050565b600080fd5b600067ffffffffffffffff821115611c0e57611c0d611aab565b5b611c1782611a9a565b9050602081019050919050565b82818337600083830152505050565b6000611c46611c4184611bf3565b611b0b565b905082815260208101848484011115611c6257611c61611bee565b5b611c6d848285611c24565b509392505050565b600082601f830112611c8a57611c89611a95565b5b8135611c9a848260208601611c33565b91505092915050565b600080600080600060a08688031215611cbf57611cbe61160d565b5b6000611ccd888289016119ac565b9550506020611cde888289016119ac565b945050604086013567ffffffffffffffff811115611cff57611cfe611612565b5b611d0b88828901611bc0565b935050606086013567ffffffffffffffff811115611d2c57611d2b611612565b5b611d3888828901611bc0565b925050608086013567ffffffffffffffff811115611d5957611d58611612565b5b611d6588828901611c75565b9150509295509295909350565b611d7b81611617565b82525050565b6000602082019050611d966000830184611d72565b92915050565b60008060408385031215611db357611db261160d565b5b6000611dc1858286016119ac565b9250506020611dd28582860161175b565b9150509250929050565b604082016000820151611df260008501826118cc565b506020820151611e0560208501826118cc565b50505050565b6000604082019050611e206000830184611ddc565b92915050565b600080600080600060a08688031215611e4257611e4161160d565b5b6000611e50888289016119ac565b9550506020611e61888289016119ac565b9450506040611e728882890161175b565b9350506060611e838882890161175b565b925050608086013567ffffffffffffffff811115611ea457611ea3611612565b5b611eb088828901611c75565b9150509295509295909350565b600080600060608486031215611ed657611ed561160d565b5b6000611ee4868287016119ac565b9350506020611ef58682870161175b565b9250506040611f068682870161175b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611f5260008501826118cc565b506020820151611f6560208501826118cc565b50505050565b6000611f778383611f3c565b60408301905092915050565b6000602082019050919050565b6000611f9b82611f10565b611fa58185611f1b565b9350611fb083611f2c565b8060005b83811015611fe1578151611fc88882611f6b565b9750611fd383611f83565b925050600181019050611fb4565b5085935050505092915050565b600060408201905081810360008301526120088185611900565b9050818103602083015261201c8184611f90565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061205f826116d2565b915061206a836116d2565b925082820190508082111561208257612081612025565b5b92915050565b6000612093826116d2565b915061209e836116d2565b92508282039050818111156120b6576120b5612025565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006120f6826116d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361212857612127612025565b5b600182019050919050565b600082825260208201905092915050565b7f7374616b652065786365656473206d6178207374616b65000000000000000000600082015250565b600061217a601783612133565b915061218582612144565b602082019050919050565b600060208201905081810360008301526121a98161216d565b9050919050565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006121e6601d83612133565b91506121f1826121b0565b602082019050919050565b60006020820190508181036000830152612215816121d9565b9050919050565b612225816117fc565b82525050565b600082825260208201905092915050565b50565b600061224c60008361222b565b91506122578261223c565b600082019050919050565b600060a082019050612277600083018761221c565b612284602083018661221c565b61229160408301856116dc565b61229e60608301846116dc565b81810360808301526122af8161223f565b905095945050505050565b60006040820190506122cf600083018561221c565b6122dc60208301846116dc565b9392505050565b7f6e6f6e6578697374656e74206170706c79000000000000000000000000000000600082015250565b6000612319601183612133565b9150612324826122e3565b602082019050919050565b600060208201905081810360008301526123488161230c565b9050919050565b7f756e7374616b65206c6f636b74696d65206e6f74206578706972656400000000600082015250565b6000612385601c83612133565b91506123908261234f565b602082019050919050565b600060208201905081810360008301526123b481612378565b9050919050565b60006060820190506123d0600083018661221c565b6123dd60208301856116dc565b6123ea60408301846116dc565b949350505050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f207374616b6573000000000000000000000000000000000000000000602082015250565b600061244e602b83612133565b9150612459826123f2565b604082019050919050565b6000602082019050818103600083015261247d81612441565b9050919050565b6000608082019050612499600083018761221c565b6124a660208301866116dc565b6124b360408301856116dc565b6124c060608301846116dc565b95945050505050565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b60006124ff601e83612133565b915061250a826124c9565b602082019050919050565b6000602082019050818103600083015261252e816124f2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122035b22a68706ad726914f71564388500d9dc3b3f04524869cfb4369687a94408664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7885,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "stakes",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressToUintMap)5676_storage"
      },
      {
        "astId": 7889,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "applyIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7894,
        "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
        "label": "applies",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UintToApply)8419_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintToApply)8419_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableApply.UintToApply)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToApply)8419_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApplyInfo)8410_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableApply.ApplyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplyInfo)8410_storage"
      },
      "t_struct(AddressToUintMap)5676_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 5675,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)4926_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ApplyInfo)8410_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.ApplyInfo",
        "members": [
          {
            "astId": 8407,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8409,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "applyTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)6373_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 6372,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6179_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)4926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 4921,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)6373_storage"
          },
          {
            "astId": 4925,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)6179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6174,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6178,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToApply)8419_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableApply.UintToApply",
        "members": [
          {
            "astId": 8413,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)6373_storage"
          },
          {
            "astId": 8418,
            "contract": "contracts/core/VigorStoneStake.sol:VigorStoneStake",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(ApplyInfo)8410_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}